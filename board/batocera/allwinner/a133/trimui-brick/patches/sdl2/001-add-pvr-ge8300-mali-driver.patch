diff -urN a/cmake/sdlchecks.cmake b/cmake/sdlchecks.cmake
--- a/cmake/sdlchecks.cmake	2023-11-02 17:03:38.000000000 +0000
+++ b/cmake/sdlchecks.cmake	2024-05-15 23:54:34.651014404 +0000
@@ -803,6 +803,28 @@
 
 # Requires:
 # - n/a
+macro(CheckMali)
+  if(SDL_MALI)
+    check_c_source_compiles("
+        #define LINUX
+        #define EGL_API_FB
+        #include <EGL/egl.h>
+        int main(int argc, char** argv) {}" HAVE_MALI_EGL_FB)
+    if(HAVE_MALI_EGL_FB)
+      set(HAVE_MALI TRUE)
+      set(HAVE_SDL_VIDEO TRUE)
+
+      file(GLOB MALI_SOURCES ${SDL2_SOURCE_DIR}/src/video/mali-fbdev/*.c)
+      set(SOURCE_FILES ${SOURCE_FILES} ${MALI_SOURCES})
+      set(SDL_VIDEO_DRIVER_MALI 1)
+      set(SDL_CFLAGS "${SDL_CFLAGS} -DLINUX -DEGL_API_FB")
+      list(APPEND EXTRA_LIBS EGL)
+    endif()
+  endif()
+endmacro()
+
+# Requires:
+# - n/a
 macro(CheckVivante)
   if(SDL_VIVANTE)
     check_c_source_compiles("
diff -urN a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt	2023-11-02 17:03:38.000000000 +0000
+++ b/CMakeLists.txt	2024-05-16 00:00:31.009299526 +0000
@@ -471,6 +471,7 @@
 dep_option(SDL_VULKAN              "Enable Vulkan support" ON "ANDROID OR APPLE OR LINUX OR WINDOWS" OFF)
 set_option(SDL_METAL               "Enable Metal support" ${APPLE})
 set_option(SDL_KMSDRM              "Use KMS DRM video driver" ${UNIX_SYS})
+set_option(SDL_MALI                "Use Mali EGL video driver" ${UNIX_SYS})
 dep_option(SDL_KMSDRM_SHARED       "Dynamically load KMS DRM support" ON "SDL_KMSDRM" OFF)
 set_option(SDL_OFFSCREEN           "Use offscreen video driver" ON)
 option_string(SDL_BACKGROUNDING_SIGNAL "number to use for magic backgrounding signal or 'OFF'" OFF)
@@ -1462,6 +1463,7 @@
     CheckOpenGLES()
     CheckWayland()
     CheckVivante()
+       CheckMali()
     # FIXME: implement CheckVulkan()
     if(SDL_VULKAN)
       set(SDL_VIDEO_VULKAN 1)
diff -urN a/configure b/configure
--- a/configure	2023-11-02 17:03:38.000000000 +0000
+++ b/configure	2024-05-16 00:23:35.212293602 +0000
@@ -922,6 +922,7 @@
 enable_video_x11_scrnsaver
 enable_video_x11_xshape
 enable_video_vivante
+enable_video_mali
 enable_video_cocoa
 enable_video_metal
 enable_render_metal
@@ -1736,6 +1737,7 @@
   --enable-video-x11-xshape
                           enable X11 XShape support [default=yes]
   --enable-video-vivante  use Vivante EGL video driver [default=yes]
+  --enable-video-mali     use Mali EGL video driver [[default=yes]]
   --enable-video-cocoa    use Cocoa video driver [default=yes]
   --enable-video-metal    include Metal support [default=yes]
   --enable-render-metal   enable the Metal render driver [default=yes]
@@ -25319,6 +25321,56 @@
     fi
 }
 
+CheckMaliVideo()
+{
+    # Check whether --enable-video-mali was given.
+if test "${enable_video_mali+set}" = set; then :
+  enableval=$enable_video_mali;
+else
+  enable_video_mali=yes
+fi
+
+    if test x$enable_video = xyes -a x$enable_video_mali = xyes; then
+        { $as_echo "$as_me:${as_lineno-$LINENO}: checking for Mali FB API" >&5
+$as_echo_n "checking for Mali FB API... " >&6; }
+        have_mali_egl=no
+        cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+          #define LINUX
+          #define EGL_API_FB
+          #include <EGL/egl.h>
+
+int
+main ()
+{
+
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+
+        have_mali_egl=yes
+
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+        { $as_echo "$as_me:${as_lineno-$LINENO}: result: $have_mali_egl" >&5
+$as_echo "$have_mali_egl" >&6; }
+
+        if test x$have_mali_egl = xyes; then
+
+$as_echo "#define SDL_VIDEO_DRIVER_MALI 1" >>confdefs.h
+
+            EXTRA_CFLAGS="$EXTRA_CFLAGS -DLINUX -DEGL_API_FB"
+            SOURCES="$SOURCES $srcdir/src/video/mali-fbdev/*.c"
+            SUMMARY_video="${SUMMARY_video} mali"
+            have_video=yes
+        fi
+    fi
+}
+
 CheckHaikuVideo()
 {
     if test x$enable_video = xyes; then
@@ -28675,6 +28727,7 @@
         CheckLinuxVersion
         CheckRPATH
         CheckVivanteVideo
+        CheckMaliVideo
 
         # Set up files for the misc library
         if test x$enable_misc = xyes; then
diff -urN a/configure.ac b/configure.ac
--- a/configure.ac	2023-11-02 17:03:38.000000000 +0000
+++ b/configure.ac	2024-05-16 00:01:53.384910405 +0000
@@ -2251,6 +2251,35 @@
     fi
 }
 
+dnl Set up the Mali video driver if enabled
+CheckMaliVideo()
+{
+    AC_ARG_ENABLE(video-mali,
+AC_HELP_STRING([--enable-video-mali], [use Mali EGL video driver [[default=yes]]]),
+                  , enable_video_mali=yes)
+    if test x$enable_video = xyes -a x$enable_video_mali = xyes; then
+        AC_MSG_CHECKING(for Mali FB API)
+        have_mali_egl=no
+        AC_TRY_COMPILE([
+          #define LINUX
+          #define EGL_API_FB
+          #include <EGL/egl.h>
+        ],[
+        ],[
+        have_mali_egl=yes
+        ])
+        AC_MSG_RESULT($have_mali_egl)
+
+        if test x$have_mali_egl = xyes; then
+            AC_DEFINE(SDL_VIDEO_DRIVER_MALI, 1, [ ])
+            EXTRA_CFLAGS="$EXTRA_CFLAGS -DLINUX -DEGL_API_FB"
+            SOURCES="$SOURCES $srcdir/src/video/mali-fbdev/*.c"
+            SUMMARY_video="${SUMMARY_video} mali"
+            have_video=yes
+        fi
+    fi
+}
+
 dnl Set up the Haiku video driver if enabled
 CheckHaikuVideo()
 {
@@ -3851,6 +3880,7 @@
         CheckLinuxVersion
         CheckRPATH
         CheckVivanteVideo
+        CheckMaliVideo
 
         # Set up files for the misc library
         if test x$enable_misc = xyes; then
diff -urN a/include/SDL_config.h b/include/SDL_config.h
--- a/include/SDL_config.h	2023-11-02 17:03:38.000000000 +0000
+++ b/include/SDL_config.h	2024-05-16 00:24:39.528095714 +0000
@@ -1,3 +1,4 @@
+/* include/SDL_config.h.  Generated from SDL_config.h.in by configure.  */
 /*
   Simple DirectMedia Layer
   Copyright (C) 1997-2023 Sam Lantinga <slouken@libsdl.org>
@@ -22,40 +23,477 @@
 #ifndef SDL_config_h_
 #define SDL_config_h_
 
-#include "SDL_platform.h"
-
 /**
- *  \file SDL_config.h
+ *  \file SDL_config.h.in
+ *
+ *  This is a set of defines to configure the SDL features
  */
 
-/* Add any platform that doesn't build using the configure system. */
-#if defined(__WIN32__)
-#include "SDL_config_windows.h"
-#elif defined(__WINRT__)
-#include "SDL_config_winrt.h"
-#elif defined(__WINGDK__)
-#include "SDL_config_wingdk.h"
-#elif defined(__XBOXONE__) || defined(__XBOXSERIES__)
-#include "SDL_config_xbox.h"
-#elif defined(__MACOSX__)
-#include "SDL_config_macosx.h"
-#elif defined(__IPHONEOS__)
-#include "SDL_config_iphoneos.h"
-#elif defined(__ANDROID__)
-#include "SDL_config_android.h"
-#elif defined(__OS2__)
-#include "SDL_config_os2.h"
-#elif defined(__EMSCRIPTEN__)
-#include "SDL_config_emscripten.h"
-#elif defined(__NGAGE__)
-#include "SDL_config_ngage.h"
+/* General platform specific identifiers */
+#include "SDL_platform.h"
+
+/* Make sure that this isn't included by Visual C++ */
+#ifdef _MSC_VER
+#error You should run git checkout -f include/SDL_config.h
+#endif
+
+/* C language features */
+/* #undef const */
+/* #undef inline */
+/* #undef volatile */
+
+/* C datatypes */
+#if defined(__LP64__) || defined(_LP64) || defined(_WIN64)
+#define SIZEOF_VOIDP 8
 #else
-/* This is a minimal configuration just to get SDL running on new platforms. */
-#include "SDL_config_minimal.h"
-#endif /* platform config */
+#define SIZEOF_VOIDP 4
+#endif
+
+#define HAVE_GCC_ATOMICS 1
+/* #undef HAVE_GCC_SYNC_LOCK_TEST_AND_SET */
+
+/* Comment this if you want to build without any C library requirements */
+#define HAVE_LIBC 1
+#if HAVE_LIBC
 
-#ifdef USING_GENERATED_CONFIG_H
-#error Wrong SDL_config.h, check your include path?
+/* Useful headers */
+#define STDC_HEADERS 1
+#define HAVE_ALLOCA_H 1
+#define HAVE_CTYPE_H 1
+#define HAVE_FLOAT_H 1
+#define HAVE_ICONV_H 1
+#define HAVE_INTTYPES_H 1
+#define HAVE_LIMITS_H 1
+#define HAVE_MALLOC_H 1
+#define HAVE_MATH_H 1
+#define HAVE_MEMORY_H 1
+#define HAVE_SIGNAL_H 1
+#define HAVE_STDARG_H 1
+#define HAVE_STDINT_H 1
+#define HAVE_STDIO_H 1
+#define HAVE_STDLIB_H 1
+#define HAVE_STRINGS_H 1
+#define HAVE_STRING_H 1
+#define HAVE_SYS_TYPES_H 1
+#define HAVE_WCHAR_H 1
+#define HAVE_LINUX_INPUT_H 1
+/* #undef HAVE_PTHREAD_NP_H */
+/* #undef HAVE_LIBUNWIND_H */
+
+/* C library functions */
+#define HAVE_DLOPEN 1
+#define HAVE_MALLOC 1
+#define HAVE_CALLOC 1
+#define HAVE_REALLOC 1
+#define HAVE_FREE 1
+#define HAVE_ALLOCA 1
+#ifndef __WIN32__ /* Don't use C runtime versions of these on Windows */
+#define HAVE_GETENV 1
+#define HAVE_SETENV 1
+#define HAVE_PUTENV 1
+#define HAVE_UNSETENV 1
 #endif
+#define HAVE_QSORT 1
+#define HAVE_BSEARCH 1
+#define HAVE_ABS 1
+#define HAVE_BCOPY 1
+#define HAVE_MEMSET 1
+#define HAVE_MEMCPY 1
+#define HAVE_MEMMOVE 1
+#define HAVE_MEMCMP 1
+#define HAVE_WCSLEN 1
+#define HAVE_WCSLCPY 1
+#define HAVE_WCSLCAT 1
+/* #undef HAVE__WCSDUP */
+#define HAVE_WCSDUP 1
+#define HAVE_WCSSTR 1
+#define HAVE_WCSCMP 1
+#define HAVE_WCSNCMP 1
+#define HAVE_WCSCASECMP 1
+/* #undef HAVE__WCSICMP */
+#define HAVE_WCSNCASECMP 1
+/* #undef HAVE__WCSNICMP */
+#define HAVE_STRLEN 1
+#define HAVE_STRLCPY 1
+#define HAVE_STRLCAT 1
+/* #undef HAVE__STRREV */
+/* #undef HAVE__STRUPR */
+/* #undef HAVE__STRLWR */
+#define HAVE_INDEX 1
+#define HAVE_RINDEX 1
+#define HAVE_STRCHR 1
+#define HAVE_STRRCHR 1
+#define HAVE_STRSTR 1
+#define HAVE_STRTOK_R 1
+/* #undef HAVE_ITOA */
+/* #undef HAVE__LTOA */
+/* #undef HAVE__UITOA */
+/* #undef HAVE__ULTOA */
+#define HAVE_STRTOL 1
+#define HAVE_STRTOUL 1
+/* #undef HAVE__I64TOA */
+/* #undef HAVE__UI64TOA */
+#define HAVE_STRTOLL 1
+#define HAVE_STRTOULL 1
+#define HAVE_STRTOD 1
+#define HAVE_ATOI 1
+#define HAVE_ATOF 1
+#define HAVE_STRCMP 1
+#define HAVE_STRNCMP 1
+/* #undef HAVE__STRICMP */
+#define HAVE_STRCASECMP 1
+/* #undef HAVE__STRNICMP */
+#define HAVE_STRNCASECMP 1
+#define HAVE_STRCASESTR 1
+/* #undef HAVE_SSCANF */
+#define HAVE_VSSCANF 1
+/* #undef HAVE_SNPRINTF */
+#define HAVE_VSNPRINTF 1
+#define HAVE_M_PI /**/
+#define HAVE_ACOS 1
+#define HAVE_ACOSF 1
+#define HAVE_ASIN 1
+#define HAVE_ASINF 1
+#define HAVE_ATAN 1
+#define HAVE_ATANF 1
+#define HAVE_ATAN2 1
+#define HAVE_ATAN2F 1
+#define HAVE_CEIL 1
+#define HAVE_CEILF 1
+#define HAVE_COPYSIGN 1
+#define HAVE_COPYSIGNF 1
+#define HAVE_COS 1
+#define HAVE_COSF 1
+#define HAVE_EXP 1
+#define HAVE_EXPF 1
+#define HAVE_FABS 1
+#define HAVE_FABSF 1
+#define HAVE_FLOOR 1
+#define HAVE_FLOORF 1
+#define HAVE_FMOD 1
+#define HAVE_FMODF 1
+#define HAVE_LOG 1
+#define HAVE_LOGF 1
+#define HAVE_LOG10 1
+#define HAVE_LOG10F 1
+#define HAVE_LROUND 1
+#define HAVE_LROUNDF 1
+#define HAVE_POW 1
+#define HAVE_POWF 1
+#define HAVE_ROUND 1
+#define HAVE_ROUNDF 1
+#define HAVE_SCALBN 1
+#define HAVE_SCALBNF 1
+#define HAVE_SIN 1
+#define HAVE_SINF 1
+#define HAVE_SQRT 1
+#define HAVE_SQRTF 1
+#define HAVE_TAN 1
+#define HAVE_TANF 1
+#define HAVE_TRUNC 1
+#define HAVE_TRUNCF 1
+#define HAVE_FOPEN64 1
+#define HAVE_FSEEKO 1
+#define HAVE_FSEEKO64 1
+#define HAVE_SIGACTION 1
+#define HAVE_SA_SIGACTION 1
+#define HAVE_SETJMP 1
+#define HAVE_NANOSLEEP 1
+#define HAVE_SYSCONF 1
+/* #undef HAVE_SYSCTLBYNAME */
+#define HAVE_CLOCK_GETTIME 1
+/* #undef HAVE_GETPAGESIZE */
+#define HAVE_MPROTECT 1
+#define HAVE_ICONV 1
+#define HAVE_PTHREAD_SETNAME_NP 1
+/* #undef HAVE_PTHREAD_SET_NAME_NP */
+#define HAVE_SEM_TIMEDWAIT 1
+#define HAVE_GETAUXVAL 1
+/* #undef HAVE_ELF_AUX_INFO */
+#define HAVE_POLL 1
+#define HAVE__EXIT 1
+
+#else
+#define HAVE_STDARG_H 1
+#define HAVE_STDDEF_H 1
+#define HAVE_STDINT_H 1
+#endif /* HAVE_LIBC */
+
+#define HAVE_O_CLOEXEC 1
+/* #undef HAVE_ALTIVEC_H */
+/* #undef HAVE_DBUS_DBUS_H */
+/* #undef HAVE_FCITX */
+#define HAVE_SYS_INOTIFY_H 1
+#define HAVE_INOTIFY_INIT 1
+#define HAVE_INOTIFY_INIT1 1
+#define HAVE_INOTIFY 1
+/* #undef HAVE_IBUS_IBUS_H */
+/* #undef HAVE_IMMINTRIN_H */
+#define HAVE_LIBUDEV_H 1
+/* #undef HAVE_LIBUSB */
+#define HAVE_LIBSAMPLERATE_H 1
+/* #undef HAVE_LIBDECOR_H */
+/* #undef HAVE_LSXINTRIN_H */
+/* #undef HAVE_LASXINTRIN_H */
+
+/* #undef HAVE_DDRAW_H */
+/* #undef HAVE_DINPUT_H */
+/* #undef HAVE_DSOUND_H */
+/* #undef HAVE_DXGI_H */
+/* #undef HAVE_WINDOWS_GAMING_INPUT_H */
+/* #undef HAVE_XINPUT_H */
+/* #undef HAVE_XINPUT_GAMEPAD_EX */
+/* #undef HAVE_XINPUT_STATE_EX */
+
+/* #undef HAVE_MMDEVICEAPI_H */
+/* #undef HAVE_AUDIOCLIENT_H */
+/* #undef HAVE_TPCSHRD_H */
+/* #undef HAVE_SENSORSAPI_H */
+/* #undef HAVE_ROAPI_H */
+/* #undef HAVE_SHELLSCALINGAPI_H */
+
+/* SDL internal assertion support */
+/* #undef SDL_DEFAULT_ASSERT_LEVEL */
+
+/* Allow disabling of core subsystems */
+/* #undef SDL_ATOMIC_DISABLED */
+/* #undef SDL_AUDIO_DISABLED */
+/* #undef SDL_CPUINFO_DISABLED */
+/* #undef SDL_EVENTS_DISABLED */
+/* #undef SDL_FILE_DISABLED */
+/* #undef SDL_JOYSTICK_DISABLED */
+/* #undef SDL_HAPTIC_DISABLED */
+#define SDL_HIDAPI_DISABLED 1
+/* #undef SDL_SENSOR_DISABLED */
+/* #undef SDL_LOADSO_DISABLED */
+/* #undef SDL_RENDER_DISABLED */
+/* #undef SDL_THREADS_DISABLED */
+/* #undef SDL_TIMERS_DISABLED */
+/* #undef SDL_VIDEO_DISABLED */
+/* #undef SDL_POWER_DISABLED */
+/* #undef SDL_FILESYSTEM_DISABLED */
+/* #undef SDL_LOCALE_DISABLED */
+/* #undef SDL_MISC_DISABLED */
+
+/* Enable various audio drivers */
+/* #undef SDL_AUDIO_DRIVER_AAUDIO */
+#define SDL_AUDIO_DRIVER_ALSA 1
+#define SDL_AUDIO_DRIVER_ALSA_DYNAMIC "libasound.so.2"
+/* #undef SDL_AUDIO_DRIVER_ANDROID */
+/* #undef SDL_AUDIO_DRIVER_ARTS */
+/* #undef SDL_AUDIO_DRIVER_ARTS_DYNAMIC */
+/* #undef SDL_AUDIO_DRIVER_COREAUDIO */
+#define SDL_AUDIO_DRIVER_DISK 1
+/* #undef SDL_AUDIO_DRIVER_DSOUND */
+#define SDL_AUDIO_DRIVER_DUMMY 1
+/* #undef SDL_AUDIO_DRIVER_EMSCRIPTEN */
+/* #undef SDL_AUDIO_DRIVER_ESD */
+/* #undef SDL_AUDIO_DRIVER_ESD_DYNAMIC */
+/* #undef SDL_AUDIO_DRIVER_FUSIONSOUND */
+/* #undef SDL_AUDIO_DRIVER_FUSIONSOUND_DYNAMIC */
+/* #undef SDL_AUDIO_DRIVER_HAIKU */
+/* #undef SDL_AUDIO_DRIVER_JACK */
+/* #undef SDL_AUDIO_DRIVER_JACK_DYNAMIC */
+/* #undef SDL_AUDIO_DRIVER_NACL */
+/* #undef SDL_AUDIO_DRIVER_NAS */
+/* #undef SDL_AUDIO_DRIVER_NAS_DYNAMIC */
+/* #undef SDL_AUDIO_DRIVER_NETBSD */
+/* #undef SDL_AUDIO_DRIVER_OPENSLES */
+#define SDL_AUDIO_DRIVER_OSS 1
+/* #undef SDL_AUDIO_DRIVER_PAUDIO */
+#define SDL_AUDIO_DRIVER_PIPEWIRE 1
+#define SDL_AUDIO_DRIVER_PIPEWIRE_DYNAMIC "libpipewire-0.3.so.0"
+/* #undef SDL_AUDIO_DRIVER_PULSEAUDIO */
+/* #undef SDL_AUDIO_DRIVER_PULSEAUDIO_DYNAMIC */
+/* #undef SDL_AUDIO_DRIVER_QSA */
+/* #undef SDL_AUDIO_DRIVER_SNDIO */
+/* #undef SDL_AUDIO_DRIVER_SNDIO_DYNAMIC */
+/* #undef SDL_AUDIO_DRIVER_SUNAUDIO */
+/* #undef SDL_AUDIO_DRIVER_WASAPI */
+/* #undef SDL_AUDIO_DRIVER_WINMM */
+/* #undef SDL_AUDIO_DRIVER_OS2 */
+
+/* Enable various input drivers */
+#define SDL_INPUT_LINUXEV 1
+/* #undef SDL_INPUT_FBSDKBIO */
+#define SDL_INPUT_LINUXKD 1
+/* #undef SDL_INPUT_WSCONS */
+/* #undef SDL_JOYSTICK_HAIKU */
+/* #undef SDL_JOYSTICK_DINPUT */
+/* #undef SDL_JOYSTICK_WGI */
+/* #undef SDL_JOYSTICK_XINPUT */
+/* #undef SDL_JOYSTICK_DUMMY */
+/* #undef SDL_JOYSTICK_IOKIT */
+/* #undef SDL_JOYSTICK_MFI */
+#define SDL_JOYSTICK_LINUX 1
+/* #undef SDL_JOYSTICK_ANDROID */
+/* #undef SDL_JOYSTICK_OS2 */
+/* #undef SDL_JOYSTICK_USBHID */
+/* #undef SDL_HAVE_MACHINE_JOYSTICK_H */
+/* #undef SDL_JOYSTICK_HIDAPI */
+/* #undef SDL_JOYSTICK_RAWINPUT */
+/* #undef SDL_JOYSTICK_EMSCRIPTEN */
+/* #undef SDL_JOYSTICK_VIRTUAL */
+/* #undef SDL_HAPTIC_DUMMY */
+/* #undef SDL_HAPTIC_ANDROID */
+#define SDL_HAPTIC_LINUX 1
+/* #undef SDL_HAPTIC_IOKIT */
+/* #undef SDL_HAPTIC_DINPUT */
+/* #undef SDL_HAPTIC_XINPUT */
+
+/* Enable various sensor drivers */
+/* #undef SDL_SENSOR_ANDROID */
+/* #undef SDL_SENSOR_COREMOTION */
+/* #undef SDL_SENSOR_WINDOWS */
+#define SDL_SENSOR_DUMMY 1
+
+/* Enable various shared object loading systems */
+#define SDL_LOADSO_DLOPEN 1
+/* #undef SDL_LOADSO_DUMMY */
+/* #undef SDL_LOADSO_LDG */
+/* #undef SDL_LOADSO_WINDOWS */
+/* #undef SDL_LOADSO_OS2 */
+
+/* Enable various threading systems */
+/* #undef SDL_THREAD_GENERIC_COND_SUFFIX */
+#define SDL_THREAD_PTHREAD 1
+#define SDL_THREAD_PTHREAD_RECURSIVE_MUTEX 1
+/* #undef SDL_THREAD_PTHREAD_RECURSIVE_MUTEX_NP */
+/* #undef SDL_THREAD_WINDOWS */
+/* #undef SDL_THREAD_OS2 */
+
+/* Enable various timer systems */
+/* #undef SDL_TIMER_HAIKU */
+/* #undef SDL_TIMER_DUMMY */
+#define SDL_TIMER_UNIX 1
+/* #undef SDL_TIMER_WINDOWS */
+/* #undef SDL_TIMER_OS2 */
+
+/* Enable various video drivers */
+/* #undef SDL_VIDEO_DRIVER_HAIKU */
+/* #undef SDL_VIDEO_DRIVER_COCOA */
+/* #undef SDL_VIDEO_DRIVER_DIRECTFB */
+/* #undef SDL_VIDEO_DRIVER_DIRECTFB_DYNAMIC */
+/* #undef SDL_VIDEO_DRIVER_DUMMY */
+/* #undef SDL_VIDEO_DRIVER_WINDOWS */
+/* #undef SDL_VIDEO_DRIVER_WAYLAND */
+/* #undef SDL_VIDEO_DRIVER_WAYLAND_QT_TOUCH */
+/* #undef SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC */
+/* #undef SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC_EGL */
+/* #undef SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC_CURSOR */
+/* #undef SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC_XKBCOMMON */
+/* #undef SDL_VIDEO_DRIVER_WAYLAND_DYNAMIC_LIBDECOR */
+/* #undef SDL_VIDEO_DRIVER_X11 */
+/* #undef SDL_VIDEO_DRIVER_RPI */
+/* #undef SDL_VIDEO_DRIVER_KMSDRM */
+/* #undef SDL_VIDEO_DRIVER_KMSDRM_DYNAMIC */
+/* #undef SDL_VIDEO_DRIVER_KMSDRM_DYNAMIC_GBM */
+/* #undef SDL_VIDEO_DRIVER_ANDROID */
+/* #undef SDL_VIDEO_DRIVER_EMSCRIPTEN */
+#define SDL_VIDEO_DRIVER_MALI 1
+/* #undef SDL_VIDEO_DRIVER_OFFSCREEN */
+/* #undef SDL_VIDEO_DRIVER_X11_DYNAMIC */
+/* #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT */
+/* #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XCURSOR */
+/* #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XINPUT2 */
+/* #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XFIXES */
+/* #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR */
+/* #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XSS */
+/* #undef SDL_VIDEO_DRIVER_X11_XCURSOR */
+/* #undef SDL_VIDEO_DRIVER_X11_XDBE */
+/* #undef SDL_VIDEO_DRIVER_X11_XINPUT2 */
+/* #undef SDL_VIDEO_DRIVER_X11_XINPUT2_SUPPORTS_MULTITOUCH */
+/* #undef SDL_VIDEO_DRIVER_X11_XFIXES */
+/* #undef SDL_VIDEO_DRIVER_X11_XRANDR */
+/* #undef SDL_VIDEO_DRIVER_X11_XSCRNSAVER */
+/* #undef SDL_VIDEO_DRIVER_X11_XSHAPE */
+/* #undef SDL_VIDEO_DRIVER_X11_SUPPORTS_GENERIC_EVENTS */
+/* #undef SDL_VIDEO_DRIVER_X11_HAS_XKBKEYCODETOKEYSYM */
+/* #undef SDL_VIDEO_DRIVER_NACL */
+/* #undef SDL_VIDEO_DRIVER_VIVANTE */
+/* #undef SDL_VIDEO_DRIVER_VIVANTE_VDK */
+/* #undef SDL_VIDEO_DRIVER_OS2 */
+/* #undef SDL_VIDEO_DRIVER_QNX */
+/* #undef SDL_VIDEO_DRIVER_RISCOS */
+
+/* #undef SDL_VIDEO_RENDER_D3D */
+/* #undef SDL_VIDEO_RENDER_D3D11 */
+/* #undef SDL_VIDEO_RENDER_D3D12 */
+/* #undef SDL_VIDEO_RENDER_OGL */
+#define SDL_VIDEO_RENDER_OGL_ES 1
+#define SDL_VIDEO_RENDER_OGL_ES2 1
+/* #undef SDL_VIDEO_RENDER_DIRECTFB */
+/* #undef SDL_VIDEO_RENDER_METAL */
+
+/* Enable OpenGL support */
+/* #undef SDL_VIDEO_OPENGL */
+#define SDL_VIDEO_OPENGL_ES 1
+#define SDL_VIDEO_OPENGL_ES2 1
+/* #undef SDL_VIDEO_OPENGL_BGL */
+/* #undef SDL_VIDEO_OPENGL_CGL */
+#define SDL_VIDEO_OPENGL_EGL 1
+/* #undef SDL_VIDEO_OPENGL_GLX */
+/* #undef SDL_VIDEO_OPENGL_WGL */
+/* #undef SDL_VIDEO_OPENGL_OSMESA */
+/* #undef SDL_VIDEO_OPENGL_OSMESA_DYNAMIC */
+
+/* Enable Vulkan support */
+/*#undef SDL_VIDEO_VULKAN 1 */
+
+/* Enable Metal support */
+/* #undef SDL_VIDEO_METAL */
+
+/* Enable system power support */
+#define SDL_POWER_LINUX 1
+/* #undef SDL_POWER_WINDOWS */
+/* #undef SDL_POWER_MACOSX */
+/* #undef SDL_POWER_HAIKU */
+/* #undef SDL_POWER_ANDROID */
+/* #undef SDL_POWER_EMSCRIPTEN */
+/* #undef SDL_POWER_HARDWIRED */
+
+/* Enable system filesystem support */
+/* #undef SDL_FILESYSTEM_ANDROID */
+/* #undef SDL_FILESYSTEM_HAIKU */
+/* #undef SDL_FILESYSTEM_COCOA */
+/* #undef SDL_FILESYSTEM_DUMMY */
+/* #undef SDL_FILESYSTEM_RISCOS */
+#define SDL_FILESYSTEM_UNIX 1
+/* #undef SDL_FILESYSTEM_WINDOWS */
+/* #undef SDL_FILESYSTEM_NACL */
+/* #undef SDL_FILESYSTEM_EMSCRIPTEN */
+/* #undef SDL_FILESYSTEM_OS2 */
+/* #undef SDL_FILESYSTEM_VITA */
+/* #undef SDL_FILESYSTEM_PSP */
+/* #undef SDL_FILESYSTEM_PS2 */
+
+/* Enable misc subsystem */
+/* #undef SDL_MISC_DUMMY */
+
+/* Enable locale subsystem */
+/* #undef SDL_LOCALE_DUMMY */
+
+/* Enable assembly routines */
+/* #undef SDL_ALTIVEC_BLITTERS */
+/* #undef SDL_ARM_SIMD_BLITTERS */
+/* #undef SDL_ARM_NEON_BLITTERS */
+
+/* Whether SDL_DYNAMIC_API needs dlopen() */
+#define DYNAPI_NEEDS_DLOPEN 1
+
+/* Enable ime support */
+/* #undef SDL_USE_IME */
+
+/* Enable dynamic udev support */
+#define SDL_UDEV_DYNAMIC "libudev.so.1"
+
+/* Enable dynamic libusb support */
+/* #undef SDL_LIBUSB_DYNAMIC */
+
+/* Enable dynamic libsamplerate support */
+#define SDL_LIBSAMPLERATE_DYNAMIC "libsamplerate.so.0"
+
+/* Libdecor get min/max content size functions */
+/* #undef SDL_HAVE_LIBDECOR_GET_MIN_MAX */
 
 #endif /* SDL_config_h_ */
diff -urN a/include/SDL_config.h.cmake b/include/SDL_config.h.cmake
--- a/include/SDL_config.h.cmake	2023-11-02 17:03:38.000000000 +0000
+++ b/include/SDL_config.h.cmake	2024-05-15 23:55:03.054942903 +0000
@@ -418,6 +418,7 @@
 #cmakedefine SDL_VIDEO_DRIVER_RPI @SDL_VIDEO_DRIVER_RPI@
 #cmakedefine SDL_VIDEO_DRIVER_VIVANTE @SDL_VIDEO_DRIVER_VIVANTE@
 #cmakedefine SDL_VIDEO_DRIVER_VIVANTE_VDK @SDL_VIDEO_DRIVER_VIVANTE_VDK@
+#cmakedefine SDL_VIDEO_DRIVER_MALI @SDL_VIDEO_DRIVER_MALI@
 #cmakedefine SDL_VIDEO_DRIVER_OS2 @SDL_VIDEO_DRIVER_OS2@
 #cmakedefine SDL_VIDEO_DRIVER_QNX @SDL_VIDEO_DRIVER_QNX@
 #cmakedefine SDL_VIDEO_DRIVER_RISCOS @SDL_VIDEO_DRIVER_RISCOS@
diff -urN a/include/SDL_config.h.in b/include/SDL_config.h.in
--- a/include/SDL_config.h.in	2023-11-02 17:03:38.000000000 +0000
+++ b/include/SDL_config.h.in	2024-05-15 23:55:14.986912860 +0000
@@ -389,6 +389,7 @@
 #undef SDL_VIDEO_DRIVER_KMSDRM_DYNAMIC_GBM
 #undef SDL_VIDEO_DRIVER_ANDROID
 #undef SDL_VIDEO_DRIVER_EMSCRIPTEN
+#undef SDL_VIDEO_DRIVER_MALI
 #undef SDL_VIDEO_DRIVER_OFFSCREEN
 #undef SDL_VIDEO_DRIVER_X11_DYNAMIC
 #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT
diff -urN a/src/video/mali-fbdev/SDL_maliopengles.c b/src/video/mali-fbdev/SDL_maliopengles.c
--- a/src/video/mali-fbdev/SDL_maliopengles.c	1970-01-01 00:00:00.000000000 +0000
+++ b/src/video/mali-fbdev/SDL_maliopengles.c	2023-07-26 12:15:45.000000000 +0000
@@ -0,0 +1,20 @@
+#include "../../SDL_internal.h"
+
+#if SDL_VIDEO_DRIVER_MALI && SDL_VIDEO_OPENGL_EGL
+
+#include "SDL_maliopengles.h"
+#include "SDL_malivideo.h"
+
+/* EGL implementation of SDL OpenGL support */
+
+int
+MALI_GLES_LoadLibrary(_THIS, const char *path)
+{
+    return SDL_EGL_LoadLibrary(_this, path, EGL_DEFAULT_DISPLAY, 0);
+}
+
+SDL_EGL_CreateContext_impl(MALI)
+SDL_EGL_SwapWindow_impl(MALI)
+SDL_EGL_MakeCurrent_impl(MALI)
+
+#endif /* SDL_VIDEO_DRIVER_MALI && SDL_VIDEO_OPENGL_EGL */
diff -urN a/src/video/mali-fbdev/SDL_maliopengles.h b/src/video/mali-fbdev/SDL_maliopengles.h
--- a/src/video/mali-fbdev/SDL_maliopengles.h	1970-01-01 00:00:00.000000000 +0000
+++ b/src/video/mali-fbdev/SDL_maliopengles.h	2023-07-26 12:15:45.000000000 +0000
@@ -0,0 +1,26 @@
+#include "../../SDL_internal.h"
+
+#ifndef _SDL_maliopengles_h
+#define _SDL_maliopengles_h
+
+#if SDL_VIDEO_DRIVER_MALI && SDL_VIDEO_OPENGL_EGL
+
+#include "../SDL_sysvideo.h"
+#include "../SDL_egl_c.h"
+
+/* OpenGLES functions */
+#define MALI_GLES_GetAttribute SDL_EGL_GetAttribute
+#define MALI_GLES_GetProcAddress SDL_EGL_GetProcAddress
+#define MALI_GLES_UnloadLibrary SDL_EGL_UnloadLibrary
+#define MALI_GLES_SetSwapInterval SDL_EGL_SetSwapInterval
+#define MALI_GLES_GetSwapInterval SDL_EGL_GetSwapInterval
+#define MALI_GLES_DeleteContext SDL_EGL_DeleteContext
+
+extern int MALI_GLES_LoadLibrary(_THIS, const char *path);
+extern SDL_GLContext MALI_GLES_CreateContext(_THIS, SDL_Window * window);
+extern int MALI_GLES_SwapWindow(_THIS, SDL_Window * window);
+extern int MALI_GLES_MakeCurrent(_THIS, SDL_Window * window, SDL_GLContext context);
+
+#endif /* SDL_VIDEO_DRIVER_MALI && SDL_VIDEO_OPENGL_EGL */
+
+#endif
diff -urN a/src/video/mali-fbdev/SDL_malivideo.c b/src/video/mali-fbdev/SDL_malivideo.c
--- a/src/video/mali-fbdev/SDL_malivideo.c	1970-01-01 00:00:00.000000000 +0000
+++ b/src/video/mali-fbdev/SDL_malivideo.c	2024-01-07 08:43:55.000000000 +0000
@@ -0,0 +1,307 @@
+#include "../../SDL_internal.h"
+
+#if SDL_VIDEO_DRIVER_MALI
+
+/* SDL internals */
+#include "../SDL_sysvideo.h"
+#include "SDL_version.h"
+#include "SDL_syswm.h"
+#include "SDL_loadso.h"
+#include "SDL_events.h"
+#include "../../events/SDL_events_c.h"
+
+#ifdef SDL_INPUT_LINUXEV
+#include "../../core/linux/SDL_evdev.h"
+#endif
+
+#include "SDL_malivideo.h"
+#include "SDL_maliopengles.h"
+
+static void
+MALI_Destroy(SDL_VideoDevice * device)
+{
+    if (device->driverdata != NULL) {
+        SDL_free(device->driverdata);
+        device->driverdata = NULL;
+    }
+}
+
+static SDL_VideoDevice *
+MALI_Create()
+{
+    SDL_VideoDevice *device;
+
+    /* Initialize SDL_VideoDevice structure */
+    device = (SDL_VideoDevice *) SDL_calloc(1, sizeof(SDL_VideoDevice));
+    if (device == NULL) {
+        SDL_OutOfMemory();
+        return NULL;
+    }
+
+    device->driverdata = NULL;
+
+    /* Setup amount of available displays and current display */
+    device->num_displays = 0;
+
+    /* Set device free function */
+    device->free = MALI_Destroy;
+
+    /* Setup all functions which we can handle */
+    device->VideoInit = MALI_VideoInit;
+    device->VideoQuit = MALI_VideoQuit;
+    device->GetDisplayModes = MALI_GetDisplayModes;
+    device->SetDisplayMode = MALI_SetDisplayMode;
+    device->CreateSDLWindow = MALI_CreateWindow;
+    device->SetWindowTitle = MALI_SetWindowTitle;
+    device->SetWindowPosition = MALI_SetWindowPosition;
+    device->SetWindowSize = MALI_SetWindowSize;
+    device->ShowWindow = MALI_ShowWindow;
+    device->HideWindow = MALI_HideWindow;
+    device->DestroyWindow = MALI_DestroyWindow;
+    device->GetWindowWMInfo = MALI_GetWindowWMInfo;
+
+    device->GL_LoadLibrary = MALI_GLES_LoadLibrary;
+    device->GL_GetProcAddress = MALI_GLES_GetProcAddress;
+    device->GL_UnloadLibrary = MALI_GLES_UnloadLibrary;
+    device->GL_CreateContext = MALI_GLES_CreateContext;
+    device->GL_MakeCurrent = MALI_GLES_MakeCurrent;
+    device->GL_SetSwapInterval = MALI_GLES_SetSwapInterval;
+    device->GL_GetSwapInterval = MALI_GLES_GetSwapInterval;
+    device->GL_SwapWindow = MALI_GLES_SwapWindow;
+    device->GL_DeleteContext = MALI_GLES_DeleteContext;
+
+    device->PumpEvents = MALI_PumpEvents;
+
+    return device;
+}
+
+VideoBootStrap MALI_bootstrap = {
+    "mali",
+    "Mali EGL Video Driver",
+    MALI_Create
+};
+
+/*****************************************************************************/
+/* SDL Video and Display initialization/handling functions                   */
+/*****************************************************************************/
+
+int
+MALI_VideoInit(_THIS)
+{
+    struct fb_var_screeninfo vinfo;
+    int fd;
+    SDL_VideoDisplay display;
+    SDL_DisplayMode current_mode;
+    SDL_DisplayData *data;
+
+    data = (SDL_DisplayData *) SDL_calloc(1, sizeof(SDL_DisplayData));
+    if (data == NULL) {
+        return SDL_OutOfMemory();
+    }
+
+    fd = open("/dev/fb0", O_RDWR, 0);
+    if (fd < 0) {
+        return SDL_SetError("mali-fbdev: Could not open framebuffer device");
+    }
+
+    if (ioctl(fd, FBIOGET_VSCREENINFO, &vinfo) < 0) {
+        MALI_VideoQuit(_this);
+        return SDL_SetError("mali-fbdev: Could not get framebuffer information");
+    }
+    /* Enable triple buffering */
+    /*
+    vinfo.yres_virtual = vinfo.yres * 3;
+    if (ioctl(fd, FBIOPUT_VSCREENINFO, vinfo) == -1) {
+	printf("mali-fbdev: Error setting VSCREENINFO\n");
+    }
+    */
+    close(fd);
+    system("setterm -cursor off");
+
+#if 0 //TRIMUI for PowerVR GE8300
+    data->native_display.width = vinfo.xres;
+    data->native_display.height = vinfo.yres;
+#endif
+
+    SDL_zero(current_mode);
+    current_mode.w = vinfo.xres;
+    current_mode.h = vinfo.yres;
+    /* FIXME: Is there a way to tell the actual refresh rate? */
+    current_mode.refresh_rate = 60;
+    /* 32 bpp for default */
+    //current_mode.format = SDL_PIXELFORMAT_ABGR8888;
+    current_mode.format = SDL_PIXELFORMAT_RGBX8888;
+
+    current_mode.driverdata = NULL;
+
+    SDL_zero(display);
+    display.desktop_mode = current_mode;
+    display.current_mode = current_mode;
+    display.driverdata = data;
+
+    SDL_AddVideoDisplay(&display, SDL_FALSE);
+
+#ifdef SDL_INPUT_LINUXEV
+    if (SDL_EVDEV_Init() < 0) {
+        return -1;
+    }
+#endif
+
+    return 0;
+}
+
+void
+MALI_VideoQuit(_THIS)
+{
+    /* Clear the framebuffer and ser cursor on again */
+    int fd = open("/dev/tty", O_RDWR);
+    ioctl(fd, VT_ACTIVATE, 5);
+    ioctl(fd, VT_ACTIVATE, 1);
+    close(fd);
+    system("setterm -cursor on");
+
+#ifdef SDL_INPUT_LINUXEV
+    SDL_EVDEV_Quit();
+#endif
+
+}
+
+void
+MALI_GetDisplayModes(_THIS, SDL_VideoDisplay * display)
+{
+    /* Only one display mode available, the current one */
+    SDL_AddDisplayMode(display, &display->current_mode);
+}
+
+int
+MALI_SetDisplayMode(_THIS, SDL_VideoDisplay * display, SDL_DisplayMode * mode)
+{
+    return 0;
+}
+
+int
+MALI_CreateWindow(_THIS, SDL_Window * window)
+{
+    SDL_WindowData *windowdata;
+    SDL_DisplayData *displaydata;
+
+    displaydata = SDL_GetDisplayDriverData(0);
+
+    /* Allocate window internal data */
+    windowdata = (SDL_WindowData *) SDL_calloc(1, sizeof(SDL_WindowData));
+    if (windowdata == NULL) {
+        return SDL_OutOfMemory();
+    }
+
+#ifndef SDL2_POWERVR_GE8300
+    /* Windows have one size for now */
+    window->w = displaydata->native_display.width;
+    window->h = displaydata->native_display.height;
+#else
+    window->w = 1280;
+    window->h = 720;
+#endif
+
+    /* OpenGL ES is the law here */
+    window->flags |= SDL_WINDOW_OPENGL;
+
+    if (!_this->egl_data) {
+        if (SDL_GL_LoadLibrary(NULL) < 0) {
+            return -1;
+        }
+    }
+    
+#ifndef SDL2_POWERVR_GE8300
+    windowdata->egl_surface = SDL_EGL_CreateSurface(_this, (NativeWindowType) &displaydata->native_display);
+#else
+    windowdata->egl_surface = SDL_EGL_CreateSurface(_this, (NativeWindowType) displaydata->native_display);
+#endif
+
+
+    if (windowdata->egl_surface == EGL_NO_SURFACE) {
+        MALI_VideoQuit(_this);
+        return SDL_SetError("mali-fbdev: Can't create EGL window surface");
+    }
+
+    /* Setup driver data for this window */
+    window->driverdata = windowdata;
+
+    /* One window, it always has focus */
+    SDL_SetMouseFocus(window);
+    SDL_SetKeyboardFocus(window);
+
+    /* Window has been successfully created */
+    printf("MALI_CreateWindow:%p done.\n", windowdata->egl_surface);
+    return 0;
+}
+
+void
+MALI_DestroyWindow(_THIS, SDL_Window * window)
+{
+    SDL_WindowData *data;
+
+    data = window->driverdata;
+    if (data) {
+        if (data->egl_surface != EGL_NO_SURFACE) {
+            SDL_EGL_DestroySurface(_this, data->egl_surface);
+            data->egl_surface = EGL_NO_SURFACE;
+        }
+        SDL_free(data);
+    }
+    window->driverdata = NULL;
+}
+
+void
+MALI_SetWindowTitle(_THIS, SDL_Window * window)
+{
+}
+
+void
+MALI_SetWindowPosition(_THIS, SDL_Window * window)
+{
+}
+
+void
+MALI_SetWindowSize(_THIS, SDL_Window * window)
+{
+}
+
+void
+MALI_ShowWindow(_THIS, SDL_Window * window)
+{
+}
+
+void
+MALI_HideWindow(_THIS, SDL_Window * window)
+{
+}
+
+/*****************************************************************************/
+/* SDL Window Manager function                                               */
+/*****************************************************************************/
+SDL_bool
+MALI_GetWindowWMInfo(_THIS, SDL_Window * window, struct SDL_SysWMinfo *info)
+{
+    if (info->version.major <= SDL_MAJOR_VERSION) {
+        return SDL_TRUE;
+    } else {
+        SDL_SetError("application not compiled with SDL %d.%d\n",
+            SDL_MAJOR_VERSION, SDL_MINOR_VERSION);
+    }
+
+    /* Failed to get window manager information */
+    return SDL_FALSE;
+}
+
+/*****************************************************************************/
+/* SDL event functions                                                       */
+/*****************************************************************************/
+void MALI_PumpEvents(_THIS)
+{
+#ifdef SDL_INPUT_LINUXEV
+    SDL_EVDEV_Poll();
+#endif
+}
+
+#endif /* SDL_VIDEO_DRIVER_MALI */
+
diff -urN a/src/video/mali-fbdev/SDL_malivideo.h b/src/video/mali-fbdev/SDL_malivideo.h
--- a/src/video/mali-fbdev/SDL_malivideo.h	1970-01-01 00:00:00.000000000 +0000
+++ b/src/video/mali-fbdev/SDL_malivideo.h	2024-01-07 08:44:04.000000000 +0000
@@ -0,0 +1,60 @@
+#ifndef _SDL_malivideo_h
+#define _SDL_malivideo_h
+
+#include "../../SDL_internal.h"
+#include "../SDL_sysvideo.h"
+
+#include "SDL_egl.h"
+
+#include <EGL/egl.h>
+#include <linux/vt.h>
+#include <linux/fb.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/ioctl.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <stdlib.h>
+
+#define SDL2_POWERVR_GE8300     1      //TRIMUI for PowerVR GE8300
+
+typedef struct SDL_DisplayData
+{
+#ifdef SDL2_POWERVR_GE8300
+    EGLNativeWindowType native_display;
+#else
+    struct fbdev_window native_display;
+#endif
+} SDL_DisplayData;
+
+typedef struct SDL_WindowData
+{
+    EGLSurface egl_surface;
+} SDL_WindowData;
+
+/****************************************************************************/
+/* SDL_VideoDevice functions declaration                                    */
+/****************************************************************************/
+
+/* Display and window functions */
+int MALI_VideoInit(_THIS);
+void MALI_VideoQuit(_THIS);
+void MALI_GetDisplayModes(_THIS, SDL_VideoDisplay * display);
+int MALI_SetDisplayMode(_THIS, SDL_VideoDisplay * display, SDL_DisplayMode * mode);
+int MALI_CreateWindow(_THIS, SDL_Window * window);
+void MALI_SetWindowTitle(_THIS, SDL_Window * window);
+void MALI_SetWindowPosition(_THIS, SDL_Window * window);
+void MALI_SetWindowSize(_THIS, SDL_Window * window);
+void MALI_ShowWindow(_THIS, SDL_Window * window);
+void MALI_HideWindow(_THIS, SDL_Window * window);
+void MALI_DestroyWindow(_THIS, SDL_Window * window);
+
+/* Window manager function */
+SDL_bool MALI_GetWindowWMInfo(_THIS, SDL_Window * window,
+                             struct SDL_SysWMinfo *info);
+
+/* Event functions */
+void MALI_PumpEvents(_THIS);
+
+#endif /* _SDL_malivideo_h */
+
diff -urN a/src/video/SDL_sysvideo.h b/src/video/SDL_sysvideo.h
--- a/src/video/SDL_sysvideo.h	2023-11-02 17:03:38.000000000 +0000
+++ b/src/video/SDL_sysvideo.h	2024-05-15 23:58:32.473905268 +0000
@@ -478,6 +478,7 @@
 extern VideoBootStrap VIVANTE_bootstrap;
 extern VideoBootStrap Emscripten_bootstrap;
 extern VideoBootStrap QNX_bootstrap;
+extern VideoBootStrap MALI_bootstrap;
 extern VideoBootStrap OFFSCREEN_bootstrap;
 extern VideoBootStrap NGAGE_bootstrap;
 extern VideoBootStrap OS2DIVE_bootstrap;
--- a/src/video/SDL_egl.c       2024-08-28 10:22:29.322961751 -0400
+++ b/src/video/SDL_egl.c       2024-08-28 10:23:19.148883793 -0400
@@ -66,7 +66,7 @@
 #define DEFAULT_OGL_ES_PVR (vc4 ? "libGLES_CM.so.1" : "libbrcmGLESv2.so")
 #define DEFAULT_OGL_ES     (vc4 ? "libGLESv1_CM.so.1" : "libbrcmGLESv2.so")

-#elif defined(SDL_VIDEO_DRIVER_ANDROID) || defined(SDL_VIDEO_DRIVER_VIVANTE)
+#elif defined(SDL_VIDEO_DRIVER_ANDROID) || defined(SDL_VIDEO_DRIVER_VIVANTE) || defined(SDL_VIDEO_DRIVER_MALI)
 /* Android */
 #define DEFAULT_EGL        "libEGL.so"
 #define DEFAULT_OGL_ES2    "libGLESv2.so"
ctalon@hyperion:/opt/ddata/merge/distribution/output/h700/build/sdl2-2.30.6/src/video$ diff -urN orig_SDL_video.c SDL_video.c
--- a/src/video/SDL_video.c     2024-08-28 10:22:36.254950901 -0400
+++ b/src/video/SDL_video.c     2024-08-28 10:23:46.749840632 -0400
@@ -78,6 +78,9 @@
 #ifdef SDL_VIDEO_DRIVER_VIVANTE
     &VIVANTE_bootstrap,
 #endif
+#ifdef SDL_VIDEO_DRIVER_MALI
+    &MALI_bootstrap,
+#endif
 #ifdef SDL_VIDEO_DRIVER_DIRECTFB
     &DirectFB_bootstrap,
 #endif

