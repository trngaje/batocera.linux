from __future__ import annotations

import filecmp
import os
import shutil
from os import environ
import subprocess
from typing import TYPE_CHECKING

from ... import Command
from ...batoceraPaths import CONFIGS
from ...controller import generate_sdl_game_controller_config
from ..Generator import Generator

if TYPE_CHECKING:
    from pathlib import Path

    from ...types import HotkeysContext

class DrasticstewardGenerator(Generator):

    def getHotkeysContext(self) -> HotkeysContext:
        return {
            "name": "drastic-steward",
            "keys": { "exit": "KEY_ESC" }
        }

    def generate(self, system, rom, playersControllers, metadata, guns, wheels, gameResolution):

        drastic_root = "/userdata/system/configs/drastic_steward"
        drastic_bin = "/userdata/system/configs/drastic_steward/drastic"
        steward_bin = "/userdata/system/configs/drastic_steward/drastic-steward"
        if not os.path.exists(drastic_root):
            shutil.copytree("/usr/share/drastic_steward", drastic_root)

        if not os.path.exists(drastic_bin) or not filecmp.cmp("/usr/share/drastic_steward/drastic", drastic_bin):
            shutil.copyfile("/usr/share/drastic_steward/drastic", drastic_bin)
            os.chmod(drastic_bin, 0o0775)
        
        if not os.path.exists(steward_bin) or not filecmp.cmp("/usr/share/drastic_steward/drastic-steward", steward_bin):
            shutil.copyfile("/usr/share/drastic_steward/drastic-steward", steward_bin)
            os.chmod(steward_bin, 0o0775)

        commandArray = [steward_bin, rom]
        return Command.Command(
            array=commandArray,
            env={
                'DISPLAY': '0.0',
                'LIB_FB': '3',
                'SDL_GAMECONTROLLERCONFIG': generate_sdl_game_controller_config(playersControllers)
            })
