From 6599ce7a96409c1da6f34792646c191e2e2407fe Mon Sep 17 00:00:00 2001
From: JohnnyonFlame <johnnyonflame@hotmail.com>
Date: Fri, 14 Jun 2024 13:08:27 -0300
Subject: [PATCH] Workaround for memory leak caused by fences not being
 destroyed.

---
 src/video/mali-fbdev/SDL_maliblitter.c  |  7 +++++++
 src/video/mali-fbdev/SDL_maliopengles.c | 10 ++++++++++
 src/video/mali-fbdev/SDL_malivideo.c    |  2 ++
 3 files changed, 19 insertions(+)

diff --git a/src/video/mali-fbdev/SDL_maliblitter.c b/src/video/mali-fbdev/SDL_maliblitter.c
index 6aa9d8f4e..6fc3fd7a6 100644
--- a/src/video/mali-fbdev/SDL_maliblitter.c
+++ b/src/video/mali-fbdev/SDL_maliblitter.c
@@ -516,6 +516,13 @@ int MALI_BlitterThread(void *data)
             0,
             EGL_FOREVER_NV))
         {
+            /* 
+                JohnnyonFlame: Mali bug. If we don't manually destroy the fence here
+                this is going to leak and crash.
+            */
+            blitter->eglDestroySyncKHR(blitter->egl_display, current_surface->egl_fence);
+            current_surface->egl_fence = EGL_NO_SYNC;
+
             /* Discarding previous data... */
             blitter->glClear(GL_COLOR_BUFFER_BIT);
 
diff --git a/src/video/mali-fbdev/SDL_maliopengles.c b/src/video/mali-fbdev/SDL_maliopengles.c
index 7819f2da1..d99e33558 100644
--- a/src/video/mali-fbdev/SDL_maliopengles.c
+++ b/src/video/mali-fbdev/SDL_maliopengles.c
@@ -68,6 +68,16 @@ int MALI_GLES_SwapWindow(_THIS, SDL_Window * window)
    windowdata->queued_buffer = windowdata->back_buffer;
    windowdata->back_buffer = prev;
 
+   // Do we have anything left over from the previous frame?
+   if (windowdata->surface[windowdata->back_buffer].egl_fence != EGL_NO_SYNC) {
+      _this->egl_data->eglDestroySyncKHR(
+         _this->egl_data->egl_display,
+         windowdata->surface[windowdata->back_buffer].egl_fence
+      );
+
+      windowdata->surface[windowdata->back_buffer].egl_fence = EGL_NO_SYNC;
+   }
+
    // Done, update back buffer surfaces
    surf = windowdata->surface[windowdata->back_buffer].egl_surface;
    windowdata->egl_surface = surf;
diff --git a/src/video/mali-fbdev/SDL_malivideo.c b/src/video/mali-fbdev/SDL_malivideo.c
index 5de6ff169..a13375c55 100644
--- a/src/video/mali-fbdev/SDL_malivideo.c
+++ b/src/video/mali-fbdev/SDL_malivideo.c
@@ -345,6 +345,8 @@ MALI_EGL_InitPixmapSurfaces(_THIS, SDL_Window *window)
             SDL_EGL_SetError("mali-fbdev: Unable to create EGL window surface", "eglCreatePixmapSurface");
             return EGL_NO_SURFACE;
         }
+
+        surf->egl_fence = EGL_NO_SYNC;
     }
 
     /* Acquire an entry point to the glFlush function used to flush the buffered commands on "swap". */
diff --git a/src/video/mali-fbdev/SDL_maliblitter.c b/src/video/mali-fbdev/SDL_maliblitter.c
index 6fc3fd7a6..c91f2b191 100644
--- a/src/video/mali-fbdev/SDL_maliblitter.c
+++ b/src/video/mali-fbdev/SDL_maliblitter.c
@@ -249,11 +249,6 @@ MALI_InitBlitterContext(_THIS, MALI_Blitter *blitter, SDL_WindowData *windata, N
     const GLchar *sources[2] = { blit_vert, blit_frag_standard };
     float scale[2];
 
-    /* Bail out early if we're already initialized. */
-    if (blitter->was_initialized) {
-        return 1;
-    }
-
     /*
      * SDL_HQ_SCALER: Selects one of the available scalers:
      * - 0: Nearest filtering
@@ -445,12 +440,12 @@ int MALI_BlitterThread(void *data)
     int prevSwapInterval = -1;
     MALI_Blitter *blitter = (MALI_Blitter*)data;
     _THIS = blitter->_this;
-    SDL_Window *window;
-    SDL_WindowData *windata;
-    SDL_VideoDisplay *display;
+    SDL_Window *window = NULL;
+    SDL_WindowData *windata = NULL;
+    SDL_VideoDisplay *display = NULL;
     SDL_DisplayData *dispdata = SDL_GetDisplayDriverData(0);
     unsigned int page;
-    MALI_EGL_Surface *current_surface;
+    MALI_EGL_Surface *current_surface = NULL;
     
     MALI_Blitter_LoadFuncs(blitter);
 
@@ -484,16 +479,20 @@ int MALI_BlitterThread(void *data)
             continue;
         }
 
-        window = blitter->window;
-        windata = (SDL_WindowData *)window->driverdata;
-        display = SDL_GetDisplayForWindow(window);
-        dispdata = (SDL_DisplayData *)display->driverdata;
-
-        /* Initialize blitter on the first out frame we have */
-        if (!MALI_InitBlitterContext(_this, blitter, windata, (NativeWindowType)&dispdata->native_display, blitter->rotation))
+        /* If we haven't initialized the blitter, the first valid frame does it. */
+        if (blitter->was_initialized == 0)
         {
-            SDL_LogError(SDL_LOG_CATEGORY_VIDEO, "Failed to initialize blitter thread");
-            SDL_Quit();
+            /* Acquire pointers for the resources needed here. */
+            window = blitter->window;
+            windata = (SDL_WindowData *)window->driverdata;
+            display = SDL_GetDisplayForWindow(window);
+            dispdata = (SDL_DisplayData *)display->driverdata;
+
+            if (!MALI_InitBlitterContext(_this, blitter, windata, (NativeWindowType)&dispdata->native_display, blitter->rotation))
+            {
+                SDL_LogError(SDL_LOG_CATEGORY_VIDEO, "Failed to initialize blitter thread");
+                SDL_Quit();
+            }            
         }
 
         if (prevSwapInterval != _this->egl_data->egl_swapinterval) {