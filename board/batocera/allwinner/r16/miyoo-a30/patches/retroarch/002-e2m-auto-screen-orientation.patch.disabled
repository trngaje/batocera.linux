diff -urN a/command.h b/command.h
--- a/command.h	2022-12-12 13:11:11.000000000 +0000
+++ b/command.h	2023-01-05 03:36:20.369512939 +0000
@@ -273,6 +273,8 @@
    CMD_EVENT_PRESENCE_UPDATE,
    CMD_EVENT_OVERLAY_NEXT,
    CMD_EVENT_OSK_TOGGLE,
+   CMD_EVENT_ROTATE_LANDSCAPE,
+   CMD_EVENT_ROTATE_PORTRAIT,
 
    /* Deprecated */
    CMD_EVENT_SEND_DEBUG_INFO
@@ -524,6 +526,8 @@
 
    { "OVERLAY_NEXT",           RARCH_OVERLAY_NEXT },
    { "OSK",                    RARCH_OSK },
+   { "ROTATE_LANDSCAPE",       RARCH_ROTATE_LANDSCAPE },
+   { "ROTATE_PORTRAIT",        RARCH_ROTATE_PORTRAIT },
 
 #if 0
    /* Deprecated */
diff -urN a/config.def.keybinds.h b/config.def.keybinds.h
--- a/config.def.keybinds.h	2022-12-12 13:11:11.000000000 +0000
+++ b/config.def.keybinds.h	2023-01-05 03:36:20.369512939 +0000
@@ -613,6 +613,20 @@
       RARCH_OSK, NO_BTN, NO_BTN, 0,
       true
    },
+   {
+      NULL, NULL,
+      AXIS_NONE, AXIS_NONE, AXIS_NONE,
+      MENU_ENUM_LABEL_VALUE_INPUT_ROTATE_LANDSCAPE, RETROK_UNKNOWN,
+      RARCH_ROTATE_LANDSCAPE, NO_BTN, NO_BTN, 0,
+      true
+   },
+   {
+      NULL, NULL,
+      AXIS_NONE, AXIS_NONE, AXIS_NONE,
+      MENU_ENUM_LABEL_VALUE_INPUT_ROTATE_PORTRAIT, RETROK_UNKNOWN,
+      RARCH_ROTATE_PORTRAIT, NO_BTN, NO_BTN, 0,
+      true
+   },
 #if 0
    /* Deprecated */
    {
@@ -1213,6 +1227,27 @@
       RARCH_OSK, NO_BTN, NO_BTN, 0,
       true
    },
+   {
+      NULL, NULL,
+      AXIS_NONE, AXIS_NONE, AXIS_NONE,
+      MENU_ENUM_LABEL_VALUE_INPUT_META_AI_SERVICE, RETROK_UNKNOWN,
+      RARCH_AI_SERVICE, NO_BTN, NO_BTN, 0,
+      true
+   },
+   {
+      NULL, NULL,
+      AXIS_NONE, AXIS_NONE, AXIS_NONE,
+      MENU_ENUM_LABEL_VALUE_INPUT_ROTATE_LANDSCAPE, RETROK_UNKNOWN,
+      RARCH_ROTATE_LANDSCAPE, NO_BTN, NO_BTN, 0,
+      true
+   },
+   {
+      NULL, NULL,
+      AXIS_NONE, AXIS_NONE, AXIS_NONE,
+      MENU_ENUM_LABEL_VALUE_INPUT_ROTATE_PORTRAIT, RETROK_UNKNOWN,
+      RARCH_ROTATE_PORTRAIT, NO_BTN, NO_BTN, 0,
+      true
+   },
 #if 0
    /* Deprecated */
    {
@@ -1823,6 +1858,20 @@
       RARCH_OSK, NO_BTN, NO_BTN, 0,
       true
    },
+   {
+      NULL, NULL,
+      AXIS_NONE, AXIS_NONE, AXIS_NONE,
+      MENU_ENUM_LABEL_VALUE_INPUT_ROTATE_LANDSCAPE, RETROK_UNKNOWN,
+      RARCH_ROTATE_LANDSCAPE, NO_BTN, NO_BTN, 0,
+      true
+   },
+   {
+      NULL, NULL,
+      AXIS_NONE, AXIS_NONE, AXIS_NONE,
+      MENU_ENUM_LABEL_VALUE_INPUT_ROTATE_PORTRAIT, RETROK_UNKNOWN,
+      RARCH_ROTATE_PORTRAIT, NO_BTN, NO_BTN, 0,
+      true
+   },
 #if 0
    /* Deprecated */
    {
diff -urN a/configuration.c b/configuration.c
--- a/configuration.c	2023-01-05 03:36:39.557475624 +0000
+++ b/configuration.c	2023-01-05 03:36:20.361512954 +0000
@@ -371,6 +371,8 @@
    /* Hidden in displaylist */
    DECLARE_META_BIND(2, overlay_next,          RARCH_OVERLAY_NEXT,           MENU_ENUM_LABEL_VALUE_INPUT_META_OVERLAY_NEXT),
    DECLARE_META_BIND(2, osk_toggle,            RARCH_OSK,                    MENU_ENUM_LABEL_VALUE_INPUT_META_OSK),
+   DECLARE_META_BIND(2, rotate_landscape,      RARCH_ROTATE_LANDSCAPE,       MENU_ENUM_LABEL_VALUE_INPUT_ROTATE_LANDSCAPE),
+   DECLARE_META_BIND(2, rotate_portrait,       RARCH_ROTATE_PORTRAIT,        MENU_ENUM_LABEL_VALUE_INPUT_ROTATE_PORTRAIT),
 #if 0
    /* Deprecated */
    DECLARE_META_BIND(2, send_debug_info,       RARCH_SEND_DEBUG_INFO,        MENU_ENUM_LABEL_VALUE_INPUT_META_SEND_DEBUG_INFO),
diff -urN a/gfx/drivers/gl2.c b/gfx/drivers/gl2.c
--- a/gfx/drivers/gl2.c	2023-01-05 03:36:39.609475523 +0000
+++ b/gfx/drivers/gl2.c	2023-01-05 03:36:20.513512660 +0000
@@ -388,7 +388,37 @@
    matrix_4x4_ortho(gl->mvp_no_rot, ortho->left, ortho->right,
          ortho->bottom, ortho->top, ortho->znear, ortho->zfar);
 
-   matrix_4x4_rotate_z(rot, M_PI * 270 / 180.0f);
+   settings_t *settings     = config_get_ptr();
+
+   float angle = 0;
+
+   static bool first_time = true;
+
+   if (first_time) {
+      if(settings->uints.video_rotation == 3)
+         settings->uints.screen_orientation = 3;
+      else 
+         settings->uints.screen_orientation = 0;
+      first_time = false;
+      RARCH_LOG("GL2_First_Time\n");
+   }
+
+   if (settings->uints.screen_orientation == 3) { // landscape
+      if (settings->uints.video_rotation == 3) {
+         angle = 0;
+      } else { //video_rotation == 0
+         angle = 90;
+      }
+   } else { // portrait (0)
+      if (settings->uints.video_rotation == 3) {
+         angle = 270;
+      } else { //video_rotation == 0
+         angle = 0;
+      }
+   }
+
+   matrix_4x4_rotate_z(rot, M_PI * angle / 180.0f);
+
    matrix_4x4_multiply(gl->mvp_screen_rot, rot, gl->mvp_no_rot);
    gl->mvp_no_rot = gl->mvp_screen_rot;
 
@@ -450,6 +480,10 @@
       {
          float delta;
 
+         /* we need to invert the aspect ratio if the screen is rotated */
+         if(settings->uints.video_rotation == 0)
+            desired_aspect = 1/desired_aspect;
+
          if (fabsf(device_aspect - desired_aspect) < 0.0001f)
          {
             /* If the aspect ratios of screen and desired aspect
diff -urN a/input/input_defines.h b/input/input_defines.h
--- a/input/input_defines.h	2022-12-12 13:11:11.000000000 +0000
+++ b/input/input_defines.h	2023-01-05 03:36:20.541512606 +0000
@@ -133,6 +133,10 @@
    RARCH_OVERLAY_NEXT,
    RARCH_OSK,
 
+   /* Orientation */
+   RARCH_ROTATE_LANDSCAPE,
+   RARCH_ROTATE_PORTRAIT,
+
    RARCH_BIND_LIST_END,
 
    /* Deprecated */
diff -urN a/input/input_driver.c b/input/input_driver.c
--- a/input/input_driver.c	2022-12-12 13:11:11.000000000 +0000
+++ b/input/input_driver.c	2023-01-05 03:36:20.549512590 +0000
@@ -4036,6 +4036,8 @@
 {
    unsigned i;
    input_driver_state_t *input_st = &input_driver_st;
+   static bool rotate_portrait_pressed = false;
+   static bool rotate_landscape_pressed = false;
 
    if (!binds)
       return;
@@ -4089,6 +4091,70 @@
             input_st->flags &= ~INP_FLAG_BLOCK_HOTKEY;
       }
    }
+   if (!is_menu && binds[port][RARCH_ROTATE_PORTRAIT].valid)
+   {
+      const struct retro_keybind *rotate_portrait_binds_auto =
+         &input_autoconf_binds[port][RARCH_ROTATE_PORTRAIT];
+      const struct retro_keybind *rotate_portrait_normal     =
+         &binds[port][RARCH_ROTATE_PORTRAIT];
+
+      /* Allows rotate_portrait hotkey to still work
+       * even though every hotkey is blocked */
+      if (CHECK_INPUT_DRIVER_BLOCK_HOTKEY(
+               rotate_portrait_normal, rotate_portrait_binds_auto))
+      {
+         if (input_state_wrap(
+                  input_st->current_driver,
+                  input_st->current_data,
+                  input_st->primary_joypad,
+                  sec_joypad,
+                  joypad_info,
+                  &binds[port],
+                  input_st->flags & INP_FLAG_KB_MAPPING_BLOCKED,
+                  port,
+                  RETRO_DEVICE_JOYPAD, 0, RARCH_ROTATE_PORTRAIT)) {
+            if(!rotate_portrait_pressed) {
+               input_st->flags &= ~INP_FLAG_BLOCK_HOTKEY;
+               rotate_portrait_pressed = true;
+               RARCH_LOG("portrait button pressed\n");
+            }
+         } else {
+            rotate_portrait_pressed = false;
+         }
+      }
+   }
+   if (!is_menu && binds[port][RARCH_ROTATE_LANDSCAPE].valid)
+   {
+      const struct retro_keybind *rotate_landscape_binds_auto =
+         &input_autoconf_binds[port][RARCH_ROTATE_LANDSCAPE];
+      const struct retro_keybind *rotate_landscape_normal     =
+         &binds[port][RARCH_ROTATE_LANDSCAPE];
+
+      /* Allows rotate_portrait hotkey to still work
+       * even though every hotkey is blocked */
+      if (CHECK_INPUT_DRIVER_BLOCK_HOTKEY(
+               rotate_landscape_normal, rotate_landscape_binds_auto))
+      {
+         if (input_state_wrap(
+                  input_st->current_driver,
+                  input_st->current_data,
+                  input_st->primary_joypad,
+                  sec_joypad,
+                  joypad_info,
+                  &binds[port],
+                  input_st->flags & INP_FLAG_KB_MAPPING_BLOCKED,
+                  port,
+                  RETRO_DEVICE_JOYPAD, 0, RARCH_ROTATE_LANDSCAPE)) {
+            if(!rotate_landscape_pressed) {
+               input_st->flags &= ~INP_FLAG_BLOCK_HOTKEY;
+               rotate_landscape_pressed = true;
+               RARCH_LOG("landscape button pressed\n");
+            }
+         } else {
+            rotate_landscape_pressed = false;
+         }
+      }
+   }
 
    {
       int16_t ret = 0;
diff -urN a/intl/msg_hash_us.h b/intl/msg_hash_us.h
--- a/intl/msg_hash_us.h	2022-12-12 13:11:11.000000000 +0000
+++ b/intl/msg_hash_us.h	2023-01-05 03:36:20.549512590 +0000
@@ -3144,6 +3144,22 @@
    MENU_ENUM_SUBLABEL_INPUT_META_SEND_DEBUG_INFO,
    "Sends diagnostic info about your device and RetroArch configuration to our servers for analysis."
    )
+MSG_HASH(
+   MENU_ENUM_LABEL_VALUE_INPUT_ROTATE_LANDSCAPE,
+   "Screen Orientation Toggle Landscape"
+   )
+MSG_HASH(
+   MENU_ENUM_SUBLABEL_INPUT_ROTATE_LANDSCAPE,
+   "Toggles Landscape"
+   )
+MSG_HASH(
+   MENU_ENUM_LABEL_VALUE_INPUT_ROTATE_PORTRAIT,
+   "Screen Orientation Toggle Portrait"
+   )
+MSG_HASH(
+   MENU_ENUM_SUBLABEL_INPUT_ROTATE_PORTRAIT,
+   "Toggles Portrait"
+   )
 
 /* Settings > Input > Port # Controls */
 
diff -urN a/menu/cbs/menu_cbs_sublabel.c b/menu/cbs/menu_cbs_sublabel.c
--- a/menu/cbs/menu_cbs_sublabel.c	2022-12-12 13:11:11.000000000 +0000
+++ b/menu/cbs/menu_cbs_sublabel.c	2023-01-05 03:36:20.569512551 +0000
@@ -429,6 +429,8 @@
 DEFAULT_SUBLABEL_MACRO(action_bind_sublabel_input_meta_netplay_game_watch,    MENU_ENUM_SUBLABEL_INPUT_META_NETPLAY_GAME_WATCH)
 DEFAULT_SUBLABEL_MACRO(action_bind_sublabel_input_meta_netplay_player_chat,   MENU_ENUM_SUBLABEL_INPUT_META_NETPLAY_PLAYER_CHAT)
 DEFAULT_SUBLABEL_MACRO(action_bind_sublabel_input_meta_netplay_fade_chat_toggle, MENU_ENUM_SUBLABEL_INPUT_META_NETPLAY_FADE_CHAT_TOGGLE)
+DEFAULT_SUBLABEL_MACRO(action_bind_sublabel_input_rotate_landscape,           MENU_ENUM_SUBLABEL_INPUT_ROTATE_LANDSCAPE)
+DEFAULT_SUBLABEL_MACRO(action_bind_sublabel_input_rotate_portrait,            MENU_ENUM_SUBLABEL_INPUT_ROTATE_PORTRAIT)
 
 #if 0
 /* Hidden in displaylist */
@@ -2233,6 +2235,12 @@
             case RARCH_NETPLAY_FADE_CHAT_TOGGLE:
                BIND_ACTION_SUBLABEL(cbs, action_bind_sublabel_input_meta_netplay_fade_chat_toggle);
                return 0;
+            case RARCH_ROTATE_LANDSCAPE:
+               BIND_ACTION_SUBLABEL(cbs, action_bind_sublabel_input_rotate_landscape);
+               return 0;
+            case RARCH_ROTATE_PORTRAIT:
+               BIND_ACTION_SUBLABEL(cbs, action_bind_sublabel_input_rotate_portrait);
+               return 0;
 
 #if 0
             /* Hidden in displaylist */
diff -urN a/msg_hash.h b/msg_hash.h
--- a/msg_hash.h	2022-12-12 13:11:11.000000000 +0000
+++ b/msg_hash.h	2023-01-05 03:36:20.373512931 +0000
@@ -956,6 +956,9 @@
    MENU_ENUM_LABEL_VALUE_INPUT_META_OSK, /* Hidden */
    MENU_ENUM_LABEL_VALUE_INPUT_META_SEND_DEBUG_INFO, /* Deprecated */
 
+   MENU_ENUM_LABEL_VALUE_INPUT_ROTATE_LANDSCAPE,
+   MENU_ENUM_LABEL_VALUE_INPUT_ROTATE_PORTRAIT,
+
    MENU_ENUM_LABEL_VALUE_INPUT_DEVICE_INDEX,
    MENU_ENUM_LABEL_VALUE_INPUT_DEVICE_TYPE,
    MENU_ENUM_LABEL_VALUE_INPUT_ADC_TYPE,
@@ -1030,6 +1033,9 @@
    MENU_ENUM_SUBLABEL_INPUT_META_OSK, /* Hidden */
    MENU_ENUM_SUBLABEL_INPUT_META_SEND_DEBUG_INFO, /* Deprecated */
 
+   MENU_ENUM_SUBLABEL_INPUT_ROTATE_LANDSCAPE,
+   MENU_ENUM_SUBLABEL_INPUT_ROTATE_PORTRAIT,
+
    MENU_ENUM_LABEL_INPUT_DESCRIPTION,
    MENU_ENUM_LABEL_INPUT_DESCRIPTION_KBD,
 
diff -urN a/retroarch.c b/retroarch.c
--- a/retroarch.c	2023-01-05 03:36:39.517475702 +0000
+++ b/retroarch.c	2023-01-05 03:36:20.369512939 +0000
@@ -2119,6 +2119,12 @@
       case CMD_EVENT_FPS_TOGGLE:
          settings->bools.video_fps_show = !(settings->bools.video_fps_show);
          break;
+      case CMD_EVENT_ROTATE_LANDSCAPE:
+         settings->uints.video_rotation = 3;
+         break;
+      case CMD_EVENT_ROTATE_PORTRAIT:
+         settings->uints.video_rotation = 0;
+         break;    
       case CMD_EVENT_STATISTICS_TOGGLE:
          settings->bools.video_statistics_show = !(settings->bools.video_statistics_show);
          break;
diff -urN a/runloop.c b/runloop.c
--- a/runloop.c	2022-12-12 13:11:11.000000000 +0000
+++ b/runloop.c	2023-01-05 03:36:20.373512931 +0000
@@ -6671,6 +6671,37 @@
       }
    }
 
+   /* Check Rotation keys */
+    {
+        bool trig_rotate_key_landscape, trig_rotate_key_portrait;
+        static bool rotate_landscape_key = false;
+        static bool old_rotate_landscape_key = false;
+        static bool rotate_portrait_key = false;
+        static bool old_rotate_portrait_key = false;
+
+        rotate_landscape_key             = BIT256_GET(current_bits, RARCH_ROTATE_LANDSCAPE);
+        trig_rotate_key_landscape = rotate_landscape_key && ! old_rotate_landscape_key;
+        rotate_portrait_key             = BIT256_GET(current_bits, RARCH_ROTATE_PORTRAIT);
+        trig_rotate_key_portrait = rotate_portrait_key && ! old_rotate_portrait_key;
+
+        if(trig_rotate_key_landscape) {
+            RARCH_LOG("landscape. trig: %d key: %2x, old_key: %2x\n", trig_rotate_key_landscape, rotate_landscape_key, old_rotate_landscape_key);
+            RARCH_LOG("portrait. trig: %d key: %2x, old_key: %2x\n", trig_rotate_key_portrait, rotate_portrait_key, old_rotate_portrait_key);
+            RARCH_LOG("LANDSCAPE TRIGGERED!!!\n");
+            command_event(CMD_EVENT_ROTATE_LANDSCAPE, NULL);
+            old_rotate_landscape_key = rotate_landscape_key;
+            old_rotate_portrait_key = 0;
+        }
+        if(trig_rotate_key_portrait) {
+            RARCH_LOG("landscape. trig: %d key: %2x, old_key: %2x\n", trig_rotate_key_landscape, rotate_landscape_key, old_rotate_landscape_key);
+            RARCH_LOG("portrait. trig: %d key: %2x, old_key: %2x\n", trig_rotate_key_portrait, rotate_portrait_key, old_rotate_portrait_key);
+            RARCH_LOG("PORTRAIT TRIGGERED!!!\n");
+            command_event(CMD_EVENT_ROTATE_PORTRAIT, NULL);
+            old_rotate_portrait_key = rotate_portrait_key;
+            old_rotate_landscape_key = 0;
+        }
+    }
+
    /* Check quit key */
    {
       bool trig_quit_key, quit_press_twice;
