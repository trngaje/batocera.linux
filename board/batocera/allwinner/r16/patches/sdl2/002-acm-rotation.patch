diff -urN sdl2-2.0.22/src/render/opengles2/SDL_render_gles2.c ../../../../../dont-delete-batocera.linux/output/acm/build/sdl2-2.0.22/src/render/opengles2/SDL_render_gles2.c
--- a/src/render/opengles2/SDL_render_gles2.c	2022-04-09 01:19:19.000000000 +0000
+++ b/src/render/opengles2/SDL_render_gles2.c	2022-09-12 15:58:19.346361427 +0000
@@ -1998,6 +1998,16 @@
 static SDL_Renderer *
 GLES2_CreateRenderer(SDL_Window *window, Uint32 flags)
 {
+    // Rotation matrix
+    float scale = 640;
+    GLfloat rotmatrix[4][4] = {{0, 1, 0 , 0},
+                               {1, 0, 0,  0},
+                               {0,  0, 1,  0},
+                               {-scale, 0, 0, scale}};
+    SDL_Rect viewport_2;
+    SDL_Rect targetrect;
+    SDL_Point origin;
+
     SDL_Renderer *renderer;
     GLES2_RenderData *data;
     Uint32 window_flags = 0; /* -Wconditional-uninitialized */
@@ -2160,8 +2170,13 @@
 
     data->drawstate.blend = SDL_BLENDMODE_INVALID;
     data->drawstate.clear_color = 0xFFFFFFFF;
-    data->drawstate.projection[3][0] = -1.0f;
-    data->drawstate.projection[3][3] = 1.0f;
+
+//    data->drawstate.projection[3][0] = -scale;
+//    data->drawstate.projection[3][3] = scale;
+//    data->drawstate.projection[3][0] = -1.0f;
+//    data->drawstate.projection[3][3] = 1.0f;
+
+    memcpy(data->drawstate.projection, rotmatrix, 4*4*sizeof(GLfloat));
 
     GL_CheckError("", renderer);
 
diff -urN sdl2-2.0.22/src/render/SDL_render.c ../../../../../dont-delete-batocera.linux/output/acm/build/sdl2-2.0.22/src/render/SDL_render.c
--- a/src/render/SDL_render.c	2022-04-21 17:37:37.000000000 +0000
+++ b/src/render/SDL_render.c	2022-09-12 15:58:19.350361417 +0000
@@ -3368,13 +3368,46 @@
 {
     SDL_FRect dstfrect;
     SDL_FRect *pdstfrect = NULL;
-    if (dstrect) {
+/*    if (dstrect) {
         dstfrect.x = (float)dstrect->x;
         dstfrect.y = (float)dstrect->y;
         dstfrect.w = (float)dstrect->w;
         dstfrect.h = (float)dstrect->h;
         pdstfrect = &dstfrect;
     }
+*/
+
+    SDL_Rect targetrect;
+    SDL_Point origin;
+    
+    // Original size, not landscape oriented
+    int ros_w;
+    int ros_h;
+    SDL_Rect viewport;
+    SDL_Rect viewport_2;
+    SDL_GetRendererOutputSize(renderer, &ros_w, &ros_h);
+//    SDL_RenderGetViewport(renderer, &viewport);
+    // probar a invertir el viewport en lugar de usar el logical size
+    viewport_2.h = 640;//ros_h;
+    viewport_2.w = 480;//ros_w;
+    viewport_2.x = 0;
+    viewport_2.y = 0;
+    SDL_RenderSetViewport(renderer, &viewport_2);
+    if(dstrect) { 
+  if(renderer->scale.x > 1.0) {
+       dstfrect.x = -160;//320 * (1 - renderer->scale.x);
+       dstfrect.y = 0 * (1 - renderer->scale.y);
+       dstfrect.w = 240;//((float) ros_w) * renderer->scale.x;
+       dstfrect.h = 320;//((float) ros_h - 160) * renderer->scale.y;
+    } else { // assume scale 1.0
+        dstfrect.x = -(float)ros_w*renderer->scale.x;//319-320.0f * renderer->scale.x;//*3.3;
+        dstfrect.y = 0;//320-240.0f * renderer->scale.y;//*3.3;
+        dstfrect.w = 960;//((float) ros_w) * renderer->scale.x;//*3.3;
+        dstfrect.h = 960;//((float) ros_h - 160) * renderer->scale.y*3.3;
+    } 
+     SDL_Log("DSTRECT: %.1f, %.1f, %.1f, %.1f, SCALE: %.1f, %.1f, ROS: %d, %d\n", dstfrect.x, dstfrect.y, dstfrect.w, dstfrect.h, renderer->scale.x, renderer->scale.y, ros_w, ros_h);
+    pdstfrect = &dstfrect;
+  }
     return SDL_RenderCopyF(renderer, texture, srcrect, pdstfrect);
 }
 
