#!/bin/sh

# knulli-record dopaz 20241117
# modified version of batocera-record, modified by stripping most of it out

# resolution needed for ffmpeg
RESOLUTION=$(batocera-resolution currentResolution)

# generate output filename
OUTPUT="/userdata/recordings/knulli-record_${RESOLUTION}_$(date +%Y%m%d_%Hh%Mm%Ss).mkv"

# get the audio device
PULSEAUDIO_MONITOR=$(LANG=C pactl info | grep -E '^Default Sink: ' | sed -e s+"^Default Sink: "+""+ | head -1).monitor

# make the recordings folder no matter what
mkdir -p /userdata/recordings || exit 1

# Check for hardware encoding support
check_hardware_encoding() {
    if [ -n "$OVERRIDE_ENCODER" ]; then
        case "$OVERRIDE_ENCODER" in
            hevc)
                if has_nvidia_gpu; then
                    ENCODER="hevc_nvenc"
                    echo "Using user-selected HEVC hardware encoding via NVENC."
                else
                    ENCODER="hevc_vaapi"
                    echo "Using user-selected HEVC hardware encoding via VA-API."
                fi
                ;;
            h264)
                if has_nvidia_gpu; then
                    ENCODER="h264_nvenc"
                    echo "Using user-selected H.264 hardware encoding via NVENC."
                else
                    ENCODER="h264_vaapi"
                    echo "Using user-selected H.264 hardware encoding via VA-API."
                fi
                ;;
            mpeg2)
                if has_nvidia_gpu; then
                    echo "Nvidia GPU's don't support hardware MPEG-2 encoding."
                    echo "Falling back to software H.264 encoding."
                    ENCODER="libx264"
                else
                    ENCODER="mpeg2_vaapi"
                    echo "Using user-selected MPEG-2 hardware encoding via VA-API."
                fi
                ;;
            software)
                ENCODER="libx264"
                echo "Using user-selected software H.264 encoding."
                ;;
            *)
                echo "Invalid encoder option. Using auto-detection."
                auto_detect_encoder
                ;;
        esac
    else
        auto_detect_encoder
    fi

    echo "With an audio input source of: ${PULSEAUDIO_MONITOR}"
    if [ "$ENCODER" = "libx264" ]; then
        echo "A resolution of: ${RESOLUTION}"
    else
        echo "A resolution of: ${RESOLUTION} and a framerate of: ${REFRESH_RATE}"       
    fi
    echo
    echo "Recording to file: ${OUTPUT}"
}

# in the full batocera-record script this IF block looks for hardware encoders that will never
# exist in Knulli, ripped it all out and forced it to be software
auto_detect_encoder() {
	ENCODER="libx264"  # Fallback to software H.264 encoding
	echo
	echo "Hardware encoding is not available."
	echo "Using: software encoder ${ENCODER}."
}

usage() {
    echo "Usage: ${1} [OPTION] [ENCODER]"
    echo "Options:"
    echo "  --default"
    echo "  --fast"
    echo "  --compress"
    echo "  --high-quality"
    echo "  --epic-mode"
    echo
    echo "Encoder options:"
#    echo "  hevc      - HEVC hardware encoding"
#    echo "  h264      - H.264 hardware encoding"
#    echo "  mpeg2     - MPEG-2 hardware encoding (Non-Nvidia cards)"
    echo "  software  - Software H.264 encoding"
    echo
    echo "Example: ${1} --fast software"
}

exit_info() {
    echo >&2
    echo "+-------------------------------+"   >&2
    echo "| Press Ctrl+c to end recording |"   >&2
    echo "+-------------------------------+"   >&2
    echo >&2
}

default_record(){
    check_hardware_encoding
    exit_info
    if [ "$ENCODER" = "hevc_vaapi" ] || [ "$ENCODER" = "h264_vaapi" ] || [ "$ENCODER" = "mpeg2_vaapi" ]; then
        ffmpeg -probesize 5M -framerate "${REFRESH_RATE}" \
               -thread_queue_size 2048 -f fbdev -i /dev/fb0 \
               -f pulse -ac 2 -channel_layout stereo -i "${PULSEAUDIO_MONITOR}" \
               -vaapi_device "${VAAPI_DEVICE}" \
               -vf 'format=nv12,hwupload' -c:v ${ENCODER} -b:v 5000k -c:a aac -async 1 "${OUTPUT}" \
               -loglevel warning
    elif [ "$ENCODER" = "hevc_nvenc" ] || [ "$ENCODER" = "h264_nvenc" ] || [ "$ENCODER" = "mpeg2_nvenc" ]; then
        ffmpeg -probesize 5M -framerate "${REFRESH_RATE}" \
               -thread_queue_size 2048 -f fbdev -i /dev/fb0 \
               -f pulse -ac 2 -channel_layout stereo -i "${PULSEAUDIO_MONITOR}" \
               -vf 'format=nv12' -c:v ${ENCODER} -b:v 5000k -c:a aac -async 1 "${OUTPUT}" \
               -loglevel warning
    else
        ffmpeg -probesize 5M -framerate 25 \
               -thread_queue_size 2048 -f fbdev -i /dev/fb0 \
               -f pulse -ac 2 -channel_layout stereo -i "${PULSEAUDIO_MONITOR}" \
               -c:v ${ENCODER} -crf 0 -preset ultrafast -c:a aac -async 1 "${OUTPUT}" \
               -loglevel warning
    fi
}

fast_record(){
    check_hardware_encoding
    exit_info
    if [ "$ENCODER" = "hevc_vaapi" ] || [ "$ENCODER" = "h264_vaapi" ] || [ "$ENCODER" = "mpeg2_vaapi" ]; then
        ffmpeg -probesize 5M -framerate "${REFRESH_RATE}" \
               -thread_queue_size 2048 -f fbdev -i /dev/fb0 \
               -f pulse -ac 2 -channel_layout stereo -i "${PULSEAUDIO_MONITOR}" \
               -vaapi_device "${VAAPI_DEVICE}" \
               -vf 'format=nv12,hwupload' -c:v ${ENCODER} -qp 0 -preset ultrafast -c:a aac -async 1 "${OUTPUT}" \
               -loglevel warning
    elif [ "$ENCODER" = "hevc_nvenc" ] || [ "$ENCODER" = "h264_nvenc" ] || [ "$ENCODER" = "mpeg2_nvenc" ]; then
        ffmpeg -probesize 5M -framerate "${REFRESH_RATE}" \
               -thread_queue_size 2048 -f fbdev -i /dev/fb0 \
               -f pulse -ac 2 -channel_layout stereo -i "${PULSEAUDIO_MONITOR}" \
               -vf 'format=nv12' -c:v ${ENCODER} -qp 0 -preset ultrafast -c:a aac -async 1 "${OUTPUT}" \
               -loglevel warning
    else
        ffmpeg -probesize 5M -framerate 30 \
               -thread_queue_size 2048 -f fbdev -i /dev/fb0 \
               -f pulse -ac 2 -channel_layout stereo -i "${PULSEAUDIO_MONITOR}" \
               -c:v ${ENCODER} -crf 0 -preset ultrafast -c:a aac -async 1 "${OUTPUT}" \
               -loglevel warning
    fi
}

compress_record(){
    check_hardware_encoding
    exit_info
    if [ "$ENCODER" = "hevc_vaapi" ] || [ "$ENCODER" = "h264_vaapi" ] || [ "$ENCODER" = "mpeg2_vaapi" ]; then
        ffmpeg -probesize 5M -framerate "${REFRESH_RATE}" \
               -thread_queue_size 2048 -f fbdev -i /dev/fb0 \
               -f pulse -ac 2 -channel_layout stereo -i "${PULSEAUDIO_MONITOR}" \
               -vaapi_device "${VAAPI_DEVICE}" \
               -vf 'format=nv12,hwupload' -c:v ${ENCODER} -crf 20 -preset veryfast -c:a aac -async 1 "${OUTPUT}" \
               -loglevel warning
    elif [ "$ENCODER" = "hevc_nvenc" ] || [ "$ENCODER" = "h264_nvenc" ] || [ "$ENCODER" = "mpeg2_nvenc" ]; then
        ffmpeg -probesize 5M -framerate "${REFRESH_RATE}" \
               -thread_queue_size 2048 -f fbdev -i /dev/fb0 \
               -f pulse -ac 2 -channel_layout stereo -i "${PULSEAUDIO_MONITOR}" \
               -vf 'format=nv12' -c:v ${ENCODER} -crf 20 -preset veryfast -c:a aac -async 1 "${OUTPUT}" \
               -loglevel warning
    else
        ffmpeg -probesize 5M -framerate 30 \
               -thread_queue_size 2048 -f fbdev -i /dev/fb0 \
               -f pulse -ac 2 -channel_layout stereo -i "${PULSEAUDIO_MONITOR}" \
               -c:v ${ENCODER} -crf 20 -preset veryfast -c:a aac -async 1 "${OUTPUT}" \
               -loglevel warning
    fi
}

high_quality_record(){
    check_hardware_encoding
    exit_info
    if [ "$ENCODER" = "hevc_vaapi" ] || [ "$ENCODER" = "h264_vaapi" ] || [ "$ENCODER" = "mpeg2_vaapi" ]; then
        ffmpeg -probesize 5M -framerate "${REFRESH_RATE}" \
               -thread_queue_size 2048 -f fbdev -i /dev/fb0 \
               -f pulse -ac 2 -channel_layout stereo -i "${PULSEAUDIO_MONITOR}" \
               -vaapi_device "${VAAPI_DEVICE}" \
               -vf 'format=nv12,hwupload' -c:v ${ENCODER} -qp 23 -preset fast -c:a aac -async 1 "${OUTPUT}" \
               -loglevel warning
    elif [ "$ENCODER" = "hevc_nvenc" ] || [ "$ENCODER" = "h264_nvenc" ] || [ "$ENCODER" = "mpeg2_nvenc" ]; then
        ffmpeg -probesize 5M -framerate "${REFRESH_RATE}" \
               -thread_queue_size 2048 -f fbdev -i /dev/fb0 \
               -f pulse -ac 2 -channel_layout stereo -i "${PULSEAUDIO_MONITOR}" \
               -vf 'format=nv12' -c:v ${ENCODER} -qp 23 -preset fast -c:a aac -async 1 "${OUTPUT}" \
               -loglevel warning
    else
        ffmpeg -probesize 5M -framerate 60 \
               -thread_queue_size 2048 -f fbdev -i /dev/fb0 \
               -f pulse -ac 2 -channel_layout stereo -i "${PULSEAUDIO_MONITOR}" \
               -c:v ${ENCODER} -qp 23 -preset fast -c:a aac -async 1 "${OUTPUT}" \
               -loglevel warning
    fi
}

epic_mode_record(){
    check_hardware_encoding
    exit_info
    if [ "$ENCODER" = "hevc_vaapi" ] || [ "$ENCODER" = "h264_vaapi" ] || [ "$ENCODER" = "mpeg2_vaapi" ]; then
        ffmpeg -probesize 5M -framerate "${REFRESH_RATE}" \
               -thread_queue_size 2048 -f fbdev -i /dev/fb0 \
               -f pulse -ac 2 -channel_layout stereo -i "${PULSEAUDIO_MONITOR}" \
               -vaapi_device "${VAAPI_DEVICE}" \
               -vf 'format=nv12,hwupload' -c:v ${ENCODER} -qp 18 -preset medium -c:a aac -async 1 "${OUTPUT}" \
               -loglevel warning
    elif [ "$ENCODER" = "hevc_nvenc" ] || [ "$ENCODER" = "h264_nvenc" ] || [ "$ENCODER" = "mpeg2_nvenc" ]; then
        ffmpeg -probesize 5M -framerate "${REFRESH_RATE}" \
               -thread_queue_size 2048 -f fbdev -i /dev/fb0 \
               -f pulse -ac 2 -channel_layout stereo -i "${PULSEAUDIO_MONITOR}" \
               -vf 'format=nv12' -c:v ${ENCODER} -qp 18 -preset medium -c:a aac -async 1 "${OUTPUT}" \
               -loglevel warning    
    else
        ffmpeg -probesize 5M -framerate 60 \
               -thread_queue_size 2048 -f fbdev -i /dev/fb0 \
               -f pulse -ac 2 -channel_layout stereo -i "${PULSEAUDIO_MONITOR}" \
               -c:v ${ENCODER} -qp 18 -preset medium -c:a aac -async 1 "${OUTPUT}" \
               -loglevel warning
    fi
}

case "${ACTION}" in
    --fast)
        fast_record || exit 1
        ;;
    --default)
        default_record || exit 1
        ;;
    --compress)
        compress_record || exit 1
        ;;
    --high-quality)
        high_quality_record || exit 1
        ;;
    --epic-mode)
        epic_mode_record || exit 1
        ;;
    -h|--help)
        usage "${0}" || exit 1
        exit 0
        ;;
    *)
        default_record || exit 1
        ;;
esac