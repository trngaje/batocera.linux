diff --git a/package/batocera/core/batocera-configgen/configgen/configgen/generators/libretro/libretroConfig.py b/package/batocera/core/batocera-configgen/configgen/configgen/generators/libretro/libretroConfig.py
index 032d247e71..0d6b1cd5e4 100644
--- a/package/batocera/core/batocera-configgen/configgen/configgen/generators/libretro/libretroConfig.py
+++ b/package/batocera/core/batocera-configgen/configgen/configgen/generators/libretro/libretroConfig.py
@@ -20,7 +20,7 @@ eslog = get_logger(__name__)
 sys.path.append(
     os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))
 
-# Return value for es invertedbuttons    
+# Return value for es invertedbuttons
 def getInvertButtonsValue():
     try:
         tree = ET.parse(batoceraFiles.esSettings)
@@ -532,7 +532,7 @@ def createLibretroConfig(generator, system, controllers, metadata, guns, wheels,
         # If set manually, proritize that.
         # Otherwise, set to portrait for games listed as 90 degrees, manual (default) if not.
         if not system.isOptSet('wswan_rotate_display'):
-            wswanGameRotation = videoMode.getAltDecoration(system.name, rom, True)
+            wswanGameRotation = videoMode.getAltDecoration(system.name, rom, system.config['emulator'])
             if wswanGameRotation == "90":
                 wswanOrientation = "portrait"
             else:
@@ -579,34 +579,23 @@ def createLibretroConfig(generator, system, controllers, metadata, guns, wheels,
             controller, pad = controller_list[i - 1]
             if (pad.guid in valid_n64_controller_guids and pad.configName in valid_n64_controller_names) or (system.isOptSet(f'{option}-controller{i}') and system.config[f'{option}-controller{i}'] != 'retropad'):
                 update_n64_controller_config(i)
-    
+
     ## TATE mode remap for handhelds
-    if system.config['core'] in ['fbneo', 'mame']:                       
+    if system.config['core'] in ['fbneo', 'mame', 'mame078plus']:
 
-        def get_board_info():
-            file_path = "/boot/boot/batocera.board"
-            with open(file_path, 'r') as file:
-                board = file.read().strip()
-            return board
+        def is_hdmi_active():
+            state = "/sys/devices/platform/soc/6000000.hdmi/extcon/hdmi/state"
+
+            if not os.path.exists(state):
+                return False
+
+            with open(state, 'r') as file:
+                state = file.read().strip()
+                if state == "HDMI=1":
+                    return True
+                else:
+                    return False
 
-        def update_handheld_config(guid, name, board):
-            if (guid, name, board) in handhelds:
-                settings = handhelds[(guid, name, board)]
-                # set display rotation
-                if settings['rotation'] == 'left':
-                    if (system.config['core'] == 'fbneo'):
-                        coreSettings.save('fbneo-vertical-mode', '"' + 'TATE alternate' + '"')
-                    elif (system.config['core'] == 'mame'):
-                        coreSettings.save('mame_rotation_mode', '"' + 'tate-rol' + '"')
-                elif settings['rotation'] == 'right':
-                    if (system.config['core'] == 'fbneo'):
-                        coreSettings.save('fbneo-vertical-mode', '"' + 'TATE' + '"')
-                    elif (system.config['core'] == 'mame'):
-                        coreSettings.save('mame_rotation_mode', '"' + 'tate-ror' + '"')
-                # remap inputs
-                for btn, value in settings['remap'].items():
-                    retroarchConfig[f'input_player1_{btn}'] = value    
-        
         def check_vertical(path, rom):
             rom_id = os.path.splitext(os.path.basename(rom))[0]
             tree = ET.parse(path)
@@ -614,7 +603,20 @@ def createLibretroConfig(generator, system, controllers, metadata, guns, wheels,
             rom_element = root.find(f".//rom[@id='{rom_id}']")
             if rom_element is not None and rom_element.get('vert') == 'true':
                 return True
-            return False
+            else:
+                return False
+
+        def update_handheld_config(name):
+            if name in handhelds:
+                settings = handhelds[name]
+                # set display rotation
+                if settings['rotation'] == 'left':
+                    retroarchConfig['video_rotation'] = '1'
+                elif settings['rotation'] == 'right':
+                    retroarchConfig['video_rotation'] = '3'
+                # remap inputs
+                for btn, value in settings['remap'].items():
+                    retroarchConfig[f'input_player1_{btn}'] = value
 
         common_remap = {
             'stk_r_x+': '18', 'stk_r_x-': '19', 'stk_r_y+': '17', 'stk_r_y-': '16',
@@ -623,38 +625,38 @@ def createLibretroConfig(generator, system, controllers, metadata, guns, wheels,
         }
 
         handhelds = {
-            ('19000000010000000100000000010000', 'Deeplay-keys', 'rg35xx-plus'): {  # rg35xx-plus
+            'Anbernic RG35XX-PLUS Controller': {  # rg35xx-plus
                 'rotation': 'left', 'remap': common_remap
             },
-            ('19000000010000000100000000010000', 'Deeplay-keys', 'rg35xx-h'): {  # rg35xx-h
+            'Anbernic RG35XX-H Controller': {  # rg35xx-h
                 'rotation': 'left', 'remap': common_remap
             },
-            ('19000000010000000100000000010000', 'ANBERNIC-keys', 'rg40xx'): {  # rg40xx
+            'Anbernic RG40XX-H Controller': {  # rg40xx-h
                 'rotation': 'left', 'remap': common_remap
             },
-            ('19000000010000000100000000010000', 'Deeplay-keys', 'rg28xx'): {  # rg28xx
-                'rotation': 'right', 
+            'Anbernic RG28XX Controller': {  # rg28xx
+                'rotation': 'right',
                 'remap': {
                     'btn_down': '7', 'btn_left': '5', 'btn_right': '4', 'btn_up': '6',
                     'btn_start': '0', 'btn_select': '8', 'btn_l2': '1', 'btn_r': '2',
                     'btn_r2': '3', 'btn_a': '-1', 'btn_b': '-1', 'btn_x': '-1', 'btn_y': '-1',
                 }
             },
-            ('030000005e0400008e02000014010000', 'TRIMUI Player1', 'trimui-smart-pro'): {  # trimui-smartpro
+            'TRIMUI Player1': {  # trimui-smartpro
                 'rotation': 'left', 'remap': common_remap
             },
         }
-        
-        board_name = get_board_info()
-        db_path = "/usr/share/emulationstation/resources/arcaderoms.xml"
-        controller, pad = sorted(controllers.items())[0]
-        
-        if system.isOptSet(f"{systemCore}-hhtate") and system.config[f"{systemCore}-hhtate"] == "True" and check_vertical(db_path, rom):
-            update_handheld_config(pad.guid, pad.configName, board_name)
-        elif system.config['core'] == 'fbneo':
-            coreSettings.save('fbneo-vertical-mode', '"disabled"')
-        elif system.config['core'] == 'mame':
-            coreSettings.save('mame_rotation_mode', '"libretro"')
+
+        if system.isOptSet(f"{systemCore}-hhtate") and system.config[f"{systemCore}-hhtate"] == "True":
+            db_path = "/usr/share/emulationstation/resources/arcaderoms.xml"
+            controller, pad = sorted(controllers.items())[0]
+            if check_vertical(db_path, rom) and not is_hdmi_active():
+                update_handheld_config(pad.configName)
+                bezel = None
+            else:
+                retroarchConfig['video_rotation'] = '0'
+        else:
+            retroarchConfig['video_rotation'] = '0'
 
     ## PORTS
     ## Quake
@@ -850,6 +852,11 @@ def createLibretroConfig(generator, system, controllers, metadata, guns, wheels,
     else:
         retroarchConfig['video_scale_integer'] = 'false'
 
+    if system.isOptSet('integeroverscale') and system.getOptBoolean('integeroverscale') == True:
+        retroarchConfig['video_scale_integer_overscale'] = 'true'
+    else:
+        retroarchConfig['video_scale_integer_overscale'] = 'false'
+
     # Netplay management
     if 'netplay.mode' in system.config and system.config['netplay.mode'] in systemNetplayModes:
         # Security : hardcore mode disables save states, which would kill netplay
@@ -1029,12 +1036,12 @@ def createLibretroConfig(generator, system, controllers, metadata, guns, wheels,
             # override core settings
             for key in raguncoreconf:
                 coreSettings.save(key, '"' + raguncoreconf[key] + '"')
-            
+
             # hide the mouse pointer with gun games
             retroarchConfig['input_overlay_show_mouse_cursor'] = "false"
     else:
         retroarchConfig['input_overlay_show_mouse_cursor'] = "true"
-    
+
     # write coreSettings a bit late while guns configs can modify it
     coreSettings.write()
 
@@ -1255,7 +1262,7 @@ def writeBezelConfig(generator, bezel, shaderBezel, retroarchConfig, rom, gameRe
     else:
         if bezel is None:
             return
-        bz_infos = bezelsUtil.getBezelInfos(rom, bezel, system.name, True)
+        bz_infos = bezelsUtil.getBezelInfos(rom, bezel, system.name, system.config['emulator'])
         if bz_infos is None:
             return
 
